{"asi.fs.glsl":"uniform lowp sampler2D _MainTex;  \nuniform lowp sampler2D _asm;\nuniform lowp sampler2D _streamlight;\nuniform lowp float _LightRate;\nuniform lowp vec4 _LightColor;\nuniform lowp float _emitpow;\nuniform lowp float _diffuse;\n//uniform highp float _Cutoff;\n\n\nvarying mediump vec2 _base_uv;\nvarying mediump vec2 _asm_uv;\nvarying mediump vec2 _light_uv;\n\n#ifdef FOG\nuniform lowp vec4 glstate_fog_color; \nvarying lowp float factor;\n#endif\n\n//texture2DEtC1Mark\n\nvoid main() \n{\n    \n    lowp vec4 baseTex=texture2D(_MainTex,_base_uv);\n    if(baseTex.a<0.5)\n    {\n        discard;\n    }\n    lowp vec3 asi=texture2D(_asm,_asm_uv).rgb;\n    lowp vec3 d_color=baseTex.rgb*_diffuse;\n    lowp vec3 e_color=baseTex.rgb*_emitpow*asi.g;\n    lowp vec3 light = texture2D(_streamlight, _light_uv).rgb* _LightRate*_LightColor.xyz;\n    light = min(light,asi.b);\n    light = light*_LightRate*_LightColor.xyz;\n    lowp vec4 emission=vec4(d_color+e_color+light,1.0);\n\n    #ifdef FOG\n    emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\n    #endif\n\n    gl_FragData[0] = emission;\n}\n\n","asi.shader.json":"{\n    \"layer\": \"geometry\",\n\t\"properties\": [\n        \"_MainTex('MainTex',Texture)='white'{}\"\n    ],\n    \"passes\": {\n        \"base\": [\n            {\n                \"showface\": \"ccw\",\n                \"vs\": \"asi\",\n                \"fs\": \"asi\"\n            }\n        ],\n        \"base_fog\": [\n            {\n                \"showface\": \"ccw\",\n                \"vs\": \"asi\",\n                \"fs\": \"asi\"\n            }\n        ],\n        \"skin\": [\n            {\n                \"showface\": \"ccw\",\n                \"vs\": \"asi\",\n                \"fs\": \"asi\"\n            }\n        ],\n        \"skin_fog\": [\n            {\n                \"showface\": \"ccw\",\n                \"vs\": \"asi\",\n                \"fs\": \"asi\"\n            }\n        ],\n        \"shadowgen\": [],\n        \"bone\": [],\n        \"shadowuse\": []\n    }\n}","asi.vs.glsl":"attribute highp vec3 _glesVertex;\nattribute mediump vec2 _glesMultiTexCoord0;\n\nuniform highp mat4 glstate_matrix_mvp;\nuniform mediump vec4 _MainTex_ST;\nuniform mediump vec4 _asm_ST;\nuniform mediump vec4 _streamlight_ST;\nuniform lowp float _speedu;\nuniform lowp float _speedv;\nuniform lowp float glstate_timer;\n\nvarying mediump vec2 _base_uv;\nvarying mediump vec2 _asm_uv;\nvarying mediump vec2 _light_uv;\n\n#ifdef FOG\nuniform lowp float glstate_fog_start;\nuniform lowp float glstate_fog_end;\nvarying lowp float factor;\n#endif\n\n#ifdef SKIN\nattribute lowp vec4 _glesBlendIndex4;\nattribute lowp vec4 _glesBlendWeight4;\nuniform highp vec4 glstate_vec4_bones[110];\nmat4 buildMat4(int index)\n{\n\tvec4 quat = glstate_vec4_bones[index * 2 + 0];\n\tvec4 translation = glstate_vec4_bones[index * 2 + 1];\n\tfloat xy = 2.0 * quat.x * quat.y;\n\tfloat xz = 2.0 * quat.x * quat.z;\n\tfloat xw = 2.0 * quat.x * quat.w;\n\tfloat yz = 2.0 * quat.y * quat.z;\n\tfloat yw = 2.0 * quat.y * quat.w;\n\tfloat zw = 2.0 * quat.z * quat.w;\n\tfloat xx = 2.0*quat.x * quat.x;\n\tfloat yy = 2.0*quat.y * quat.y;\n\tfloat zz = 2.0*quat.z * quat.z;\n\tfloat ww = 2.0*quat.w * quat.w;\n\tfloat s = translation.w;\n\tmat4 matrix = mat4(\n\t(1.0-yy-zz)*s, (xy+zw)*s, (xz-yw)*s, 0,\n\t(xy-zw)*s, (1.0-xx-zz)*s, (yz + xw)*s, 0,\n\t(xz + yw)*s, (yz - xw)*s, (1.0-xx-yy)*s, 0,\n\ttranslation.x, translation.y, translation.z, 1);\n\treturn matrix;\n}\n\nhighp vec4 calcVertex(highp vec4 srcVertex,lowp vec4 blendIndex,lowp vec4 blendWeight)\n{\n\tint i = int(blendIndex.x);\n    int i2 =int(blendIndex.y);\n\tint i3 =int(blendIndex.z);\n\tint i4 =int(blendIndex.w);\n\n    mat4 mat = buildMat4(i)*blendWeight.x\n\t\t\t + buildMat4(i2)*blendWeight.y\n\t\t\t + buildMat4(i3)*blendWeight.z\n\t\t\t + buildMat4(i4)*blendWeight.w;\n\treturn mat* srcVertex;\n}\n#endif\nvoid main()\n{\n\thighp vec4 position=vec4(_glesVertex.xyz,1.0);\n\n\t_base_uv = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n\t_asm_uv = _glesMultiTexCoord0.xy * _asm_ST.xy + _asm_ST.zw;\n\tlowp vec2 _speed;\n    _speed = vec2(_speedu,_speedv);\n    _light_uv = (_glesMultiTexCoord0.xy * _streamlight_ST.xy + _streamlight_ST.zw)  + _speed * glstate_timer;\n\n    #ifdef SKIN\n    position =calcVertex(position,_glesBlendIndex4,_glesBlendWeight4);\n    #endif\n    position = (glstate_matrix_mvp * position);\n\n    #ifdef FOG\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\n    factor = clamp(factor, 0.0, 1.0);\n    #endif\n\n\tgl_Position = position;\n}\n\n","blendnotest.vs.glsl":"attribute highp vec4 _glesVertex;\nattribute mediump vec4 _glesMultiTexCoord0;   \n\nuniform lowp vec4 _Main_Color;\nuniform highp mat4 glstate_matrix_mvp;\nuniform mediump vec4 _Main_Tex_ST;\n\n\nvarying lowp vec4 xlv_COLOR;\nvarying mediump vec2 xlv_TEXCOORD0;                \nvoid main()                                     \n{                                               \n    highp vec4 tmpvar_1=vec4(_glesVertex.xyz,1.0);\n    xlv_COLOR = vec4(1.0,1.0,1.0,1.0);\n\txlv_TEXCOORD0 =_glesMultiTexCoord0.xy * _Main_Tex_ST.xy + _Main_Tex_ST.zw;\n                \n    gl_Position = (glstate_matrix_mvp *tmpvar_1);  \n}","blend_notest.shader.json":"{\n  \"layer\": \"transparent\",\n  \"queue\":  0,\n  \"properties\": [\n\t\t    \"_Main_Tex('MainTex',Texture)='white'{}\",\n        \"_Main_Color ('Tint Color', Color) = (1.0,1.0,1.0,1.0)\"\n    ],\n    \"passes\": {\n        \"base\": [\n          {\n            \"blendmode\": \"blend\",\n            \"showface\": \"ccw\",\n            \"zwrite\": \"off\",\n            \"ztest\":\"off\",\n            \"vs\": \"blendnotest\",\n            \"fs\": \"f14trans\"\n          }\n        ],\n        \"shadowgen\": [],  \n        \"bone\": [],\n        \"shadowuse\": []\n    }\n}","bloom.fs.glsl":"#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\nuniform sampler2D       _MainTex;//清晰图\nuniform sampler2D       _BlurTex;//模糊高光的图\nuniform highp vec4      _MainTex_TexelSize;\n\nuniform highp float     _bloomIntensity;\n// 强度 - 附加光（影响到该特效的光源）的全局光强\nuniform highp vec4     _blurSpread;\n// 模糊扩散 - Frag down sample 的偏移距离\nuniform highp float     _bloomThreshold;\n// 阈值 - 图像中亮度高于该阈值的区域将产生泛光效果\n\nvarying highp vec2      xlv_TEXCOORD0;   // 每个片元的纹素坐标\n\n#define INTENSITY       _bloomIntensity\n#define THRESHOLD       _bloomThreshold\n#define BLUR_SPREAD     vec2(_blurSpread.xy * _MainTex_TexelSize.xy)\n\n#define tex(t, uv)      texture2D((t), (uv))\n\n//texture2DEtC1Mark\n\nfloat luminance(vec3 rgb) {\n    const vec3 w = vec3(0.2125, 0.7154, 0.0721);\n    return dot(rgb, w);\n}\n// Blur spread 扩撒\nvec4 fragDownsample(sampler2D image, vec2 uv) {\n    vec2 uv2[4];\n    uv2[0] = uv + _MainTex_TexelSize.xy * vec2(1.5, 1.5);\n    uv2[1] = uv + _MainTex_TexelSize.xy * vec2(-1.5, 1.5);\n    uv2[2] = uv + _MainTex_TexelSize.xy * vec2(-1.5, -1.5);\n    uv2[3] = uv + _MainTex_TexelSize.xy * vec2(1.5, -1.5);\n    vec4 color;\n    color += texture2D(image, uv2[0]);\n    color += texture2D(image, uv2[1]);\n    color += texture2D(image, uv2[2]);\n    color += texture2D(image, uv2[3]);\n    return max(color/4.0 - THRESHOLD, vec4(0.0)) * INTENSITY;\n}\nvec4 fastBlur(sampler2D image, vec2 uv, vec2 netFilterWidth) {\n\n    vec4 blur = vec4(0.0);\n    vec2 _offset[7];\n    vec4 curve[7];\n    curve[0] = vec4(0.0205, 0.0205, 0.0205, 0.0);\n    curve[1] = vec4(0.0855, 0.0855, 0.0855, 0.0);\n    curve[2] = vec4(0.232, 0.232, 0.232, 0.0);\n    curve[3] = vec4(0.324, 0.324, 0.324, 1.0);\n    curve[4] = vec4(0.232, 0.232, 0.232, 0.0);\n    curve[5] = vec4(0.0855, 0.0855, 0.0855, 0.0);\n    curve[6] = vec4(0.0205, 0.0205, 0.0205, 0.0);\n    // horizontal or vertical blur, defined by netFilterWidth vector\n    _offset[0] = uv + netFilterWidth * 3.0;\n    _offset[1] = uv + netFilterWidth * 2.0;\n    _offset[2] = uv + netFilterWidth;\n    _offset[3] = uv;\n    _offset[4] = uv - netFilterWidth;\n    _offset[5] = uv - netFilterWidth * 2.0;\n    _offset[6] = uv - netFilterWidth * 3.0;\n    for(int l = 0; l < 7; l++) {\n        blur += tex(image, _offset[l]) * curve[l];\n    }\n\n    return blur;\n}\n\nvoid main () {\n    if(BLUR_SPREAD.x == 0.0 && BLUR_SPREAD.y == 0.0) {    // 不泛光, 只过滤\n        gl_FragColor = fragDownsample(_MainTex, xlv_TEXCOORD0);\n    } else if(THRESHOLD == 1.0){    // 不过滤, 只泛光\n        gl_FragColor = fastBlur(_MainTex, xlv_TEXCOORD0, BLUR_SPREAD);\n    } else {    // Final Composition\n        vec4 originColor = texture2D(_MainTex, xlv_TEXCOORD0);\n        originColor = vec4(originColor.rgb * INTENSITY, originColor.a);\n        vec4 bloomColor = texture2D(_BlurTex, xlv_TEXCOORD0);\n        gl_FragColor = originColor + bloomColor;\n    }\n\n    // vec4 c = texture2D(_MainTex, xlv_TEXCOORD0);\n    // vec4 cur_color;\n    // cur_color = fastBlur(_MainTex, xlv_TEXCOORD0,BLUR_SPREAD);\n    //\n    // c = vec4(c.rgb * INTENSITY, c.a) / 2.0;\n    // gl_FragColor = c;\n}\n","bloom.shader.json":"{\n    \"layer\": \"geometry\",\n    \"properties\": [\n        \"_MainTex('MainTex',Texture)='white'{}\",\n        \"_bloomFactor('bloomFactor',Range(0.0,1.0)) = 2.0\"\n    ],\n    \"passes\": {\n        \"base\": [\n            {\n                \"showface\": \"ccw\",\n                \"vs\": \"quad\",\n                \"fs\": \"bloom\"\n            }\n        ],\n        \"quad\": [\n            {\n                \"showface\": \"ccw\",\n                \"vs\": \"quad\",\n                \"fs\": \"bloom\"\n            }\n        ]\n    }\n}","diffuse.fs.glsl":"precision lowp float;\nuniform lowp sampler2D _MainTex;\nuniform lowp vec4 _MainColor;\nuniform lowp float _AlphaCut;\nvarying mediump vec2 xlv_TEXCOORD0;\n\n//light\nlowp vec4 xlv_COLOR = vec4(0.0,0.0,0.0,1.0); \nbool hasLight = false;\nlowp vec3 fixedAmbient = vec3(0.6,0.6,0.6);\nuniform lowp float glstate_lightcount;\nuniform lowp vec4 glstate_vec4_lightposs[8];\nuniform lowp vec4 glstate_vec4_lightdirs[8];\nuniform lowp float glstate_float_spotangelcoss[8];\nuniform lowp vec4 glstate_vec4_lightcolors[8];\nuniform lowp float glstate_float_lightrange[8];\nuniform lowp float glstate_float_lightintensity[8];\n\nvarying lowp vec3 v_N;\nvarying lowp vec3 v_Mpos;\n\n//texture2DEtC1Mark\n\n#ifdef LIGHTMAP\nuniform lowp float glstate_lightmapRGBAF16;\nuniform lowp sampler2D _LightmapTex;\nvarying mediump vec2 lightmap_TEXCOORD;\nlowp vec3 decode_hdr(lowp vec4 data)\n{\n    lowp float power =pow( 2.0 ,data.a * 255.0 - 128.0);\n    return data.rgb * power * 2.0 ;\n}\n#endif\n\n#ifdef FOG\nuniform lowp vec4 glstate_fog_color; \nvarying lowp float factor;\n#endif\n\n//calcDiffuse 计算漫反射强度函数\n//统一三种光源的传参方式，在函数内混合，方便就不高效\n//只需要方向光时另写\n//N 世界空间法线\n//worldpos 世界空间pos\n//lightPos 光源位置,w=0 表示方向光\n//lightDir 光源方向，W=0 表示点光源，和楼上的w一起为1 表示 探照灯 spot\n//cosspot cos(a) a为spot的半径 a取值0到90度，算好cos再传进来\nlowp float calcDiffuse(lowp vec3 N,lowp vec3 worldpos,lowp vec4 lightPos,lowp vec4 lightDir,lowp float cosspot,lowp float range )\n{\n    lowp vec3 v3 = lightPos.xyz - worldpos;\n    lowp float len = length(v3);\n    len = len > range ? range : len;\n    //求入射角，点光源&聚光灯\n    lowp vec3 L = normalize(v3); \n    //求张角 聚光灯 也是方向光入射角\n    lowp vec3 L2 = -lightDir.xyz;\n    lowp float dotSpot = dot(L,L2);\n    //漫反射强度\n    lowp float diffuse =clamp(dot(N.xyz,L.xyz),0.0,1.0) * pow(1.0 - len/range,2.0); \n    lowp float diffuseD =clamp(dot(N.xyz,L2.xyz),0.0,1.0); \n    //pos.w 和 dir.w 至少有一个1，刚好组合出三种光源\n    diffuse= mix(diffuse,diffuse*smoothstep(cosspot,1.0,dotSpot),lightDir.w);\n    diffuse= mix(diffuseD,diffuse,lightPos.w);\n    return diffuse;\n}\n\nvoid calcCOLOR(){\n    int c =int(glstate_lightcount);\n\tif(c>0){\n        hasLight = true;\n        lowp float diff=0.0;\n\t\t//calcDiffuse(N,worldpos,glstate_vec4_lightposs[0],glstate_vec4_lightdirs[0],0.8);\n\t\tfor(int i=0;i<8;i++)\n\t\t{\n\t\t\tif(i>=c)break;\n\t\t\t//diff += calcDiffuse(v_N,v_Mpos,glstate_vec4_lightposs[i],glstate_vec4_lightdirs[i],glstate_float_spotangelcoss[i],glstate_float_lightrange[i]);\n\t\t\tdiff = calcDiffuse(v_N,v_Mpos,glstate_vec4_lightposs[i],glstate_vec4_lightdirs[i],glstate_float_spotangelcoss[i],glstate_float_lightrange[i]);\n            xlv_COLOR += glstate_float_lightintensity[i] * glstate_vec4_lightcolors[i] * diff;\n\t\t}\n\t\txlv_COLOR.w = 1.0;  \n    }\n}\n\nvoid main() \n{\n    lowp vec4 basecolor = texture2D(_MainTex, xlv_TEXCOORD0);\n    if(basecolor.a < _AlphaCut)\n        discard;\n    lowp vec4 fristColor=basecolor*_MainColor;\n    lowp vec4 emission = fristColor;\n\n    //----------------------------------------------------------\n    //light\n    calcCOLOR();\n    \n#ifdef LIGHTMAP\n    lowp vec4 lightmap = texture2D(_LightmapTex, lightmap_TEXCOORD);\n    if(glstate_lightmapRGBAF16 == 1.0){\n        emission.xyz *= lightmap.xyz;\n    }else{\n        emission.xyz *= decode_hdr(lightmap);\n    }\n    if(hasLight){ // have light\n        fristColor = fristColor * xlv_COLOR ;\n        emission = emission + mix(vec4(1.0, 1.0, 1.0, 1.0), fristColor, fristColor.wwww);\n    }\n#else\n\tif(hasLight){ // have light\n        emission = (fristColor * xlv_COLOR) + (fristColor * vec4(fixedAmbient,1.0));\n    }\n#endif\n\n#ifdef FOG\n    emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\n#endif\n    \n    gl_FragData[0] = emission;\n}","diffuse.shader.json":"{\n    \"layer\": \"geometry\",\n    \"properties\": [\n        \"_MainTex('MainTex',Texture)='white'{}\",\n        \"_AlphaCut('AlphaCut',Range(0.0,1.0)) = 0.5\",\n        \"_MainTex_ST('MainTex_ST',Vector) = (1,1,0,0)\",\n        \"_MainColor ('MainColor', Color) = (1,1,1,1)\"\n    ],\n    \"passes\": {\n\n        \"base\": [\n            {\n                \"showface\": \"ccw\",\n                \"vs\": \"diffuse\",\n                \"fs\": \"diffuse\"\n            }\n        ],\n        \"base_fog\": [\n            {\n                \"showface\": \"ccw\",\n                \"vs\": \"diffuse\",\n                \"fs\": \"diffuse\"\n            }\n        ],\n        \"skin\": [\n            {\n                \"showface\": \"ccw\",\n                \"vs\": \"diffuse\",\n                \"fs\": \"diffuse\"\n            }\n        ],\n        \"skin_fog\": [\n            {\n                \"showface\": \"ccw\",\n                \"vs\": \"diffuse\",\n                \"fs\": \"diffuse\"\n            }\n        ],\n        \"lightmap\": [\n            {\n                \"showface\": \"ccw\",\n                \"vs\": \"diffuse\",\n                \"fs\": \"diffuse\"\n            }\n        ],\n        \"lightmap_fog\": [\n            {\n                \"showface\": \"ccw\",\n                \"vs\": \"diffuse\",\n                \"fs\": \"diffuse\"\n            }\n        ],\n        \"base_depth\": [\n            {\n                \"showface\": \"ccw\",\n                \"vs\": \"post_depth\",\n                \"fs\": \"post_depth\"\n            }\n        ]\n    }\n}","diffuse.vs.glsl":"attribute highp vec4 _glesVertex;\r\nattribute mediump vec2 _glesMultiTexCoord0;\r\n\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform mediump vec4 _MainTex_ST;\r\nvarying mediump vec2 xlv_TEXCOORD0;\r\n//light\r\nlowp mat4 blendMat ;\r\nattribute lowp vec3 _glesNormal;\r\nuniform highp mat4 glstate_matrix_model;\r\nuniform lowp float glstate_lightcount;\r\n\r\nvarying highp vec3 v_N;\r\nvarying highp vec3 v_Mpos;\r\n\r\n\r\n#ifdef LIGHTMAP\r\nattribute mediump vec2 _glesMultiTexCoord1;\r\nuniform mediump vec4 glstate_lightmapOffset;\r\nuniform lowp float glstate_lightmapUV;\r\nvarying mediump vec2 lightmap_TEXCOORD;\r\n#endif\r\n\r\n#ifdef FOG\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nvarying lowp float factor;\r\n#endif\r\n\r\n#ifdef SKIN\r\nattribute lowp vec4 _glesBlendIndex4;\r\nattribute lowp vec4 _glesBlendWeight4;\r\nuniform highp vec4 glstate_vec4_bones[110];\r\nmat4 buildMat4(int index)\r\n{\r\n\tvec4 quat = glstate_vec4_bones[index * 2 + 0];\r\n\tvec4 translation = glstate_vec4_bones[index * 2 + 1];\r\n\tfloat xy = 2.0 * quat.x * quat.y;\r\n\tfloat xz = 2.0 * quat.x * quat.z;\r\n\tfloat xw = 2.0 * quat.x * quat.w;\r\n\tfloat yz = 2.0 * quat.y * quat.z;\r\n\tfloat yw = 2.0 * quat.y * quat.w;\r\n\tfloat zw = 2.0 * quat.z * quat.w;\r\n\tfloat xx = 2.0*quat.x * quat.x;\r\n\tfloat yy = 2.0*quat.y * quat.y;\r\n\tfloat zz = 2.0*quat.z * quat.z;\r\n\tfloat ww = 2.0*quat.w * quat.w;\r\n\tfloat s = translation.w;\r\n\tmat4 matrix = mat4(\r\n\t(1.0-yy-zz)*s, (xy+zw)*s, (xz-yw)*s, 0,\r\n\t(xy-zw)*s, (1.0-xx-zz)*s, (yz + xw)*s, 0,\r\n\t(xz + yw)*s, (yz - xw)*s, (1.0-xx-yy)*s, 0,\r\n\ttranslation.x, translation.y, translation.z, 1);\r\n\treturn matrix;\r\n}\r\n\r\nhighp vec4 calcVertex(highp vec4 srcVertex,lowp vec4 blendIndex,lowp vec4 blendWeight)\r\n{\r\n\tint i = int(blendIndex.x);\r\n    int i2 =int(blendIndex.y);\r\n\tint i3 =int(blendIndex.z);\r\n\tint i4 =int(blendIndex.w);\r\n\r\n    blendMat = buildMat4(i)*blendWeight.x\r\n\t\t\t + buildMat4(i2)*blendWeight.y\r\n\t\t\t + buildMat4(i3)*blendWeight.z\r\n\t\t\t + buildMat4(i4)*blendWeight.w;\r\n\treturn blendMat * srcVertex;\r\n}\r\n\r\n#endif\r\n\r\nvoid calcNormal(highp vec4 pos){\r\n\tint c =int(glstate_lightcount);\r\n\tif(c>0){\r\n\t\t//求世界空间法线\r\n\t\t#ifdef SKIN\r\n\t\tv_N = normalize(mat3(blendMat) * _glesNormal);\r\n\t\t#else\r\n\t\tv_N = _glesNormal;\r\n\t\t#endif\r\n\t\tlowp mat3 normalmat = mat3(glstate_matrix_model);\r\n\t\tv_N =normalize(normalmat*v_N);\r\n\t\tv_Mpos =(glstate_matrix_model * pos).xyz;\r\n\t}\r\n}\r\n\r\nvoid main()\r\n{\r\n    xlv_TEXCOORD0 = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\r\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n\r\n    //----------------------------------------------------------\r\n    #ifdef LIGHTMAP\r\n    mediump vec2 beforelightUV = (1.0 - glstate_lightmapUV) * _glesMultiTexCoord0  + glstate_lightmapUV * _glesMultiTexCoord1;\t//unity lightMap UV ,优先使用UV1,次之UV0 \r\n    lowp float u = beforelightUV.x * glstate_lightmapOffset.x + glstate_lightmapOffset.z;\r\n    lowp float v = beforelightUV.y * glstate_lightmapOffset.y + glstate_lightmapOffset.w;\r\n    lightmap_TEXCOORD = vec2(u,v);\r\n    #endif\r\n\r\n    #ifdef SKIN\r\n    position =calcVertex(position,_glesBlendIndex4,_glesBlendWeight4);\r\n    #endif\r\n\t//light\r\n    calcNormal(position);\r\n    position = (glstate_matrix_mvp * position);\r\n\r\n    #ifdef FOG\r\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\r\n    factor = clamp(factor, 0.0, 1.0);\r\n    #endif\r\n\r\n\r\n    gl_Position =position;\r\n}","diffuse_bothside.shader.json":"{\n    \"layer\": \"geometry\",\n    \"properties\": [\n        \"_MainTex('MainTex',Texture)='white'{}\",\n        \"_AlphaCut('AlphaCut',Range(0.0,1.0)) = 0.5\",\n        \"_MainTex_ST('MainTex_ST',Vector) = (1,1,0,0)\",\n        \"_MainColor ('MainColor', Color) = (1,1,1,1)\"\n    ],\n    \"passes\": {\n\n        \"base\": [\n            {\n                \"showface\": \"all\",\n                \"vs\": \"diffuse\",\n                \"fs\": \"diffuse\"\n            }\n        ],\n        \"base_fog\": [\n            {\n                \"showface\": \"all\",\n                \"vs\": \"diffuse\",\n                \"fs\": \"diffuse\"\n            }\n        ],\n        \"skin\": [\n            {\n                \"showface\": \"all\",\n                \"vs\": \"diffuse\",\n                \"fs\": \"diffuse\"\n            }\n        ],\n        \"skin_fog\": [\n            {\n                \"showface\": \"all\",\n                \"vs\": \"diffuse\",\n                \"fs\": \"diffuse\"\n            }\n        ],\n        \"lightmap\": [\n            {\n                \"showface\": \"all\",\n                \"vs\": \"diffuse\",\n                \"fs\": \"diffuse\"\n            }\n        ],\n        \"lightmap_fog\": [\n            {\n                \"showface\": \"all\",\n                \"vs\": \"diffuse\",\n                \"fs\": \"diffuse\"\n            }\n        ]\n    }\n}","diffuse_nolight.fs.glsl":"precision lowp float;\nuniform lowp sampler2D _MainTex;\nuniform lowp vec4 _MainColor;\nuniform lowp float _AlphaCut;\nvarying mediump vec2 xlv_TEXCOORD0;\n\n//texture2DEtC1Mark\n\n#ifdef LIGHTMAP\nuniform lowp sampler2D _LightmapTex;\nvarying mediump vec2 lightmap_TEXCOORD;\nlowp vec3 decode_hdr(lowp vec4 data)\n{\n    lowp float power =pow( 2.0 ,data.a * 255.0 - 128.0);\n    return data.rgb * power * 2.0 ;\n}\n#endif\n\n#ifdef FOG\nuniform lowp vec4 glstate_fog_color; \nvarying lowp float factor;\n#endif\n\nvoid main() \n{\n    lowp vec4 basecolor = texture2D(_MainTex, xlv_TEXCOORD0);\n    if(basecolor.a < _AlphaCut)\n        discard;\n    lowp vec4 fristColor=basecolor*_MainColor;\n    lowp vec4 emission = fristColor;\n\n    //----------------------------------------------------------\n    \n    #ifdef LIGHTMAP\n    lowp vec4 lightmap = texture2D(_LightmapTex, lightmap_TEXCOORD);\n    emission.xyz *= decode_hdr(lightmap);\n    #endif\n\n    #ifdef FOG\n    emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\n    #endif\n    \n    gl_FragData[0] = emission;\n}","diffuse_nolight.shader.json":"{\n    \"layer\": \"geometry\",\n    \"properties\": [\n        \"_MainTex('MainTex',Texture)='white'{}\",\n        \"_AlphaCut('AlphaCut',Range(0.0,1.0)) = 0.5\",\n        \"_MainTex_ST('MainTex_ST',Vector) = (1,1,0,0)\",\n        \"_MainColor ('MainColor', Color) = (1,1,1,1)\"\n    ],\n    \"passes\": {\n\n        \"base\": [\n            {\n                \"showface\": \"ccw\",\n                \"vs\": \"diffuse_nolight\",\n                \"fs\": \"diffuse_nolight\"\n            }\n        ],\n        \"base_fog\": [\n            {\n                \"showface\": \"ccw\",\n                \"vs\": \"diffuse_nolight\",\n                \"fs\": \"diffuse_nolight\"\n            }\n        ],\n        \"skin\": [\n            {\n                \"showface\": \"ccw\",\n                \"vs\": \"diffuse_nolight\",\n                \"fs\": \"diffuse_nolight\"\n            }\n        ],\n        \"skin_fog\": [\n            {\n                \"showface\": \"ccw\",\n                \"vs\": \"diffuse_nolight\",\n                \"fs\": \"diffuse_nolight\"\n            }\n        ],\n        \"lightmap\": [\n            {\n                \"showface\": \"ccw\",\n                \"vs\": \"diffuse_nolight\",\n                \"fs\": \"diffuse_nolight\"\n            }\n        ],\n        \"lightmap_fog\": [\n            {\n                \"showface\": \"ccw\",\n                \"vs\": \"diffuse_nolight\",\n                \"fs\": \"diffuse_nolight\"\n            }\n        ],\n        \"base_depth\": [\n            {\n                \"showface\": \"ccw\",\n                \"vs\": \"post_depth\",\n                \"fs\": \"post_depth\"\n            }\n        ]\n    }\n}","diffuse_nolight.vs.glsl":"attribute highp vec4 _glesVertex;\nattribute mediump vec4 _glesMultiTexCoord0;\n\nuniform highp mat4 glstate_matrix_mvp;\nuniform mediump vec4 _MainTex_ST;\nvarying mediump vec2 xlv_TEXCOORD0;\n\n#ifdef LIGHTMAP\nattribute mediump vec4 _glesMultiTexCoord1;\nuniform mediump vec4 glstate_lightmapOffset;\n// uniform mediump float glstate_lightmapUV;\nvarying mediump vec2 lightmap_TEXCOORD;\n#endif\n\n#ifdef FOG\nuniform lowp float glstate_fog_start;\nuniform lowp float glstate_fog_end;\nvarying lowp float factor;\n#endif\n\n#ifdef SKIN\nattribute lowp vec4 _glesBlendIndex4;\nattribute lowp vec4 _glesBlendWeight4;\nuniform highp vec4 glstate_vec4_bones[110];\nmat4 buildMat4(int index)\n{\n\tvec4 quat = glstate_vec4_bones[index * 2 + 0];\n\tvec4 translation = glstate_vec4_bones[index * 2 + 1];\n\tfloat xy = 2.0 * quat.x * quat.y;\n\tfloat xz = 2.0 * quat.x * quat.z;\n\tfloat xw = 2.0 * quat.x * quat.w;\n\tfloat yz = 2.0 * quat.y * quat.z;\n\tfloat yw = 2.0 * quat.y * quat.w;\n\tfloat zw = 2.0 * quat.z * quat.w;\n\tfloat xx = 2.0*quat.x * quat.x;\n\tfloat yy = 2.0*quat.y * quat.y;\n\tfloat zz = 2.0*quat.z * quat.z;\n\tfloat ww = 2.0*quat.w * quat.w;\n\tfloat s = translation.w;\n\tmat4 matrix = mat4(\n\t(1.0-yy-zz)*s, (xy+zw)*s, (xz-yw)*s, 0,\n\t(xy-zw)*s, (1.0-xx-zz)*s, (yz + xw)*s, 0,\n\t(xz + yw)*s, (yz - xw)*s, (1.0-xx-yy)*s, 0,\n\ttranslation.x, translation.y, translation.z, 1);\n\treturn matrix;\n}\n\nhighp vec4 calcVertex(highp vec4 srcVertex,lowp vec4 blendIndex,lowp vec4 blendWeight)\n{\n\tint i = int(blendIndex.x);\n    int i2 =int(blendIndex.y);\n\tint i3 =int(blendIndex.z);\n\tint i4 =int(blendIndex.w);\n\n\tlowp mat4 blendMat = buildMat4(i)*blendWeight.x\n\t\t\t + buildMat4(i2)*blendWeight.y\n\t\t\t + buildMat4(i3)*blendWeight.z\n\t\t\t + buildMat4(i4)*blendWeight.w;\n\treturn blendMat * srcVertex;\n}\n\n#endif\n\n\nvoid main()\n{\n    xlv_TEXCOORD0 = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\n\n    //----------------------------------------------------------\n    #ifdef LIGHTMAP\n    mediump vec2 beforelightUV = _glesMultiTexCoord1.xy;\n    lowp float u = beforelightUV.x * glstate_lightmapOffset.x + glstate_lightmapOffset.z;\n    lowp float v = beforelightUV.y * glstate_lightmapOffset.y + glstate_lightmapOffset.w;\n    lightmap_TEXCOORD = vec2(u,v);\n    #endif\n\n    #ifdef SKIN\n    position =calcVertex(position,_glesBlendIndex4,_glesBlendWeight4);\n    #endif\n\n    position = (glstate_matrix_mvp * position);\n\n    #ifdef FOG\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\n    factor = clamp(factor, 0.0, 1.0);\n    #endif\n\n\n    gl_Position =position;\n}","f14trans.fs.glsl":"uniform mediump sampler2D _Main_Tex;\n\nvarying lowp vec4 xlv_COLOR;\nvarying mediump vec2 xlv_TEXCOORD0;       \n//texture2DEtC1Mark\n   \nvoid main() \n{\n    lowp vec4 basecolor = texture2D(_Main_Tex, xlv_TEXCOORD0);\n    gl_FragData[0] =basecolor*xlv_COLOR;\n    //gl_FragData[0] =vec4(1,0,0,1);\n}","f14trans.vs.glsl":"attribute highp vec4 _glesVertex;\nattribute mediump vec4 _glesMultiTexCoord0;   \nattribute lowp vec4 _glesColor;\n\nuniform lowp vec4 _Main_Color;\nuniform highp mat4 glstate_matrix_mvp;\nuniform mediump vec4 _Main_Tex_ST;\n\n\nvarying lowp vec4 xlv_COLOR;\nvarying mediump vec2 xlv_TEXCOORD0;                \nvoid main()                                     \n{                                               \n    highp vec4 tmpvar_1=vec4(_glesVertex.xyz,1.0);\n    xlv_COLOR = _Main_Color*_glesColor;\n\txlv_TEXCOORD0 =_glesMultiTexCoord0.xy * _Main_Tex_ST.xy + _Main_Tex_ST.zw;\n                \n    gl_Position = (glstate_matrix_mvp *tmpvar_1);  \n}","f4skin.fs.glsl":"precision lowp float;\nuniform lowp sampler2D _MainTex;\nuniform lowp vec4 _MainColor;\nuniform lowp float _AlphaCut;\n// varying mediump vec2 xlv_TEXCOORD0;\n\n// #ifdef LIGHTMAP\n// uniform lowp sampler2D _LightmapTex;\n// varying mediump vec2 lightmap_TEXCOORD;\n// lowp vec3 decode_hdr(lowp vec4 data)\n// {\n//     lowp float power =pow( 2.0 ,data.a * 255.0 - 128.0);\n//     return data.rgb * power * 2.0 ;\n// }\n// #endif\n\n#ifdef FOG\nuniform lowp vec4 glstate_fog_color;\nvarying lowp float factor;\n#endif\n\nvarying highp vec4 vcolor;\n\n//texture2DEtC1Mark\n\nvoid main()\n{\n    // lowp vec4 basecolor = vec4(1);\n    // // lowp vec4 basecolor = texture2D(_MainTex, xlv_TEXCOORD0);\n    // // if(basecolor.a < _AlphaCut)\n    // //     discard;\n    // lowp vec4 fristColor=basecolor*_MainColor;\n    // lowp vec4 emission = fristColor;\n\n    // //----------------------------------------------------------\n\n    // // #ifdef LIGHTMAP\n    // // lowp vec4 lightmap = texture2D(_LightmapTex, lightmap_TEXCOORD);\n    // // emission.xyz *= decode_hdr(lightmap);\n    // // #endif\n\n    // #ifdef FOG\n    // emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\n    // #endif\n\n    gl_FragData[0] = vec4(pow(vcolor.rgb, vec3(1./2.2)), vcolor.a);\n    // gl_FragData[0] = vec4(1, 0, 0, 1);\n}","f4skin.shader.json":"{\n    \"layer\": \"geometry\",\n    \"properties\": [\n        \"_MainTex('MainTex',Texture)='white'{}\",\n        \"boneSampler('MainTex',Texture)='white'{}\",\n        \"boneSamplerTexelSize('boneSamplerTexelSize',float)=0.1\",\n        \"_AlphaCut('AlphaCut',Range(0.0,1.0)) = 0.5\",\n        \"_MainTex_ST('MainTex_ST',Vector) = (1,1,0,0)\",\n        \"_MainColor ('MainColor', Color) = (1,1,1,1)\"\n    ],\n    \"passes\": {\n\n        \"base\": [\n            {\n                \"showface\": \"all\",\n                \"vs\": \"f4skin\",\n                \"fs\": \"diffuse\"\n            }\n        ],\n        \"base_fog\": [\n            {\n                \"showface\": \"all\",\n                \"vs\": \"f4skin\",\n                \"fs\": \"diffuse\"\n            }\n        ],\n        \"skin\": [\n            {\n                \"showface\": \"all\",\n                \"vs\": \"f4skin\",\n                \"fs\": \"diffuse\"\n            }\n        ],\n        \"skin_fog\": [\n            {\n                \"showface\": \"all\",\n                \"vs\": \"f4skin\",\n                \"fs\": \"diffuse\"\n            }\n        ],\n        \"lightmap\": [\n            {\n                \"showface\": \"all\",\n                \"vs\": \"f4skin\",\n                \"fs\": \"f4skin\"\n            }\n        ],\n        \"lightmap_fog\": [\n            {\n                \"showface\": \"all\",\n                \"vs\": \"f4skin\",\n                \"fs\": \"f4skin\"\n            }\n        ],\n        \"base_depth\": [\n            {\n                \"showface\": \"all\",\n                \"vs\": \"post_depth\",\n                \"fs\": \"post_depth\"\n            }\n        ]\n    }\n}","f4skin.vs.glsl":"precision highp float;\n\nattribute highp vec4 _glesVertex;\nattribute mediump vec4 _glesMultiTexCoord0;\nattribute highp vec4 _glesColor;\n\nuniform highp mat4 glstate_matrix_mvp;\nuniform mediump vec4 _MainTex_ST;\n// varying mediump vec2 xlv_TEXCOORD0;\n\n// #ifdef LIGHTMAP\n// attribute mediump vec4 _glesMultiTexCoord1;\n// uniform mediump vec4 glstate_lightmapOffset;\n// // uniform mediump float glstate_lightmapUV;\n// varying mediump vec2 lightmap_TEXCOORD;\n// #endif\n\n\n// NOTE: diffuse cap\nvarying lowp vec3 v_N;\nvarying lowp vec3 v_Mpos;\nvarying mediump vec2 xlv_TEXCOORD0;\nvarying mediump vec2 lightmap_TEXCOORD;\n\n\n//texture2DEtC1Mark\n\n\n#ifdef FOG\nuniform lowp float glstate_fog_start;\nuniform lowp float glstate_fog_end;\nvarying lowp float factor;\n#endif\n\n#define SKIN2\n\n#define SKIN\n#ifdef SKIN\nattribute lowp vec4 _glesBlendIndex4;\nattribute lowp vec4 _glesBlendWeight4;\nuniform highp vec4 glstate_vec4_bones[110];\n\n#ifdef SKIN2\n// uniform highp mat4 glstate_matrix_bones[24];\nuniform highp sampler2D boneSampler;\nuniform highp float boneSamplerTexelSize;\nuniform highp vec4 boneSampler_TexelSize;\n\nmat4 readMatrixSampler(sampler2D smp, float index) {\n    float offset = index * 4.;\n    return mat4(\n\t\ttexture2D(smp, vec2(boneSamplerTexelSize * (offset + 0.5), 0)),\n\t\ttexture2D(smp, vec2(boneSamplerTexelSize * (offset + 1.5), 0)),\n\t\ttexture2D(smp, vec2(boneSamplerTexelSize * (offset + 2.5), 0)),\n\t\ttexture2D(smp, vec2(boneSamplerTexelSize * (offset + 3.5), 0))\n\t\t);\n}\nhighp vec4 calcVertexF4(highp vec4 srcVertex) {\n\tmat4 mat = _glesBlendWeight4[0] * readMatrixSampler(boneSampler, _glesBlendIndex4[0])\n\t\t\t+ _glesBlendWeight4[1] * readMatrixSampler(boneSampler, _glesBlendIndex4[1])\n\t\t\t+ _glesBlendWeight4[2] * readMatrixSampler(boneSampler, _glesBlendIndex4[2])\n\t\t\t+ _glesBlendWeight4[3] * readMatrixSampler(boneSampler, _glesBlendIndex4[3]);\n\treturn mat * srcVertex;\n}\n#endif\n\nmat4 buildMat4(int index)\n{\n\tvec4 quat = glstate_vec4_bones[index * 2 + 0];\n\tvec4 translation = glstate_vec4_bones[index * 2 + 1];\n\tfloat xy = 2.0 * quat.x * quat.y;\n\tfloat xz = 2.0 * quat.x * quat.z;\n\tfloat xw = 2.0 * quat.x * quat.w;\n\tfloat yz = 2.0 * quat.y * quat.z;\n\tfloat yw = 2.0 * quat.y * quat.w;\n\tfloat zw = 2.0 * quat.z * quat.w;\n\tfloat xx = 2.0*quat.x * quat.x;\n\tfloat yy = 2.0*quat.y * quat.y;\n\tfloat zz = 2.0*quat.z * quat.z;\n\tfloat ww = 2.0*quat.w * quat.w;\n\tmat4 matrix = mat4(\n\t1.0-yy-zz, xy+zw, xz-yw, 0,\n\txy-zw, 1.0-xx-zz, yz + xw, 0,\n\txz + yw, yz - xw, 1.0-xx-yy, 0,\n\ttranslation.x, translation.y, translation.z, 1);\n\treturn matrix;\n}\n\nhighp vec4 calcVertex(highp vec4 srcVertex,lowp vec4 blendIndex,lowp vec4 blendWeight)\n{\n\tint i = int(blendIndex.x);\n    int i2 =int(blendIndex.y);\n\tint i3 =int(blendIndex.z);\n\tint i4 =int(blendIndex.w);\n\n\tlowp mat4 blendMat = buildMat4(i)*blendWeight.x\n\t\t\t + buildMat4(i2)*blendWeight.y\n\t\t\t + buildMat4(i3)*blendWeight.z\n\t\t\t + buildMat4(i4)*blendWeight.w;\n\treturn blendMat * srcVertex;\n}\n\n#endif\n\nvarying highp vec4 vcolor;\n\n\nvoid main()\n{\n    xlv_TEXCOORD0 = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n\n\tmat4 mat = _glesBlendWeight4[0] * readMatrixSampler(boneSampler, _glesBlendIndex4[0])\n\t\t\t+ _glesBlendWeight4[1] * readMatrixSampler(boneSampler, _glesBlendIndex4[1])\n\t\t\t+ _glesBlendWeight4[2] * readMatrixSampler(boneSampler, _glesBlendIndex4[2])\n\t\t\t+ _glesBlendWeight4[3] * readMatrixSampler(boneSampler, _glesBlendIndex4[3]);\n\t// mat = mat4(\n\t// \tvec4(1, 0, 0, 0),\n\t// \tvec4(0, 1, 0, 0),\n\t// \tvec4(0, 0, 1, 0),\n\t// \tvec4(0, 0, 0, 1)\n\t// \t);\n\t// mat = _glesBlendWeight4.x * glstate_matrix_bones[int(_glesBlendIndex4.x)]\n\t// \t\t+ _glesBlendWeight4.y * glstate_matrix_bones[int(_glesBlendIndex4.y)]\n\t// \t\t+ _glesBlendWeight4.z * glstate_matrix_bones[int(_glesBlendIndex4.z)]\n\t// \t\t+ _glesBlendWeight4.w * glstate_matrix_bones[int(_glesBlendIndex4.w)];\n\tvcolor = vec4(texture2D(boneSampler, _glesVertex.xz / vec2(8., 0)/ 3.).rgb, 1);\n    // xlv_TEXCOORD0 = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\n\n    // //----------------------------------------------------------\n    // #ifdef LIGHTMAP\n    // mediump vec2 beforelightUV = _glesMultiTexCoord1.xy;\n    // lowp float u = beforelightUV.x * glstate_lightmapOffset.x + glstate_lightmapOffset.z;\n    // lowp float v = beforelightUV.y * glstate_lightmapOffset.y + glstate_lightmapOffset.w;\n    // lightmap_TEXCOORD = vec2(u,v);\n    // #endif\n\n    #ifdef SKIN\n    // position =calcVertex(position,_glesBlendIndex4,_glesBlendWeight4);\n\tposition = mat * position;\n    #endif\n\n    position = (glstate_matrix_mvp * position);\n\n    #ifdef FOG\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\n    factor = clamp(factor, 0.0, 1.0);\n    #endif\n\n\n    gl_Position =position;\n}","flowwater_new.fs.glsl":"uniform lowp sampler2D _MainTex;  \nvarying mediump vec2 _base_uv;\nvarying lowp vec4 attcolor;\n\n#ifdef FOG\nuniform lowp vec4 glstate_fog_color; \nvarying lowp float factor;\n#endif\n\n//texture2DEtC1Mark\n\n\nvoid main() \n{\n    lowp vec4 basecolor = texture2D(_MainTex, _base_uv);\n    lowp vec4 emission=basecolor*attcolor;\n\n    #ifdef FOG\n    //emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\n    emission= mix(vec4(0,0,0,0), emission, factor);\n    #endif\n\n    gl_FragData[0] =emission;\n}","flowwater_new.shader.json":"{\n  \"layer\": \"transparent\",\n  \"properties\": [\n        \"_MainTex('MainTex',Texture)='white'{}\",\n\t\t    \"_MainColor('MainColor',color)=(1,1,1,1)\"\n    ],\n  \"queue\": 0,\n  \"passes\": {\n    \"base\": [\n      {\n        \"blendmode\": \"blend\",\n        \"showface\": \"ccw\",\n        \"zwrite\": \"off\",\n        \"vs\": \"flowwater_new\",\n        \"fs\": \"flowwater_new\"\n      }\n    ],\n    \"base_fog\": [\n      {\n        \"blendmode\": \"blend\",\n        \"showface\": \"ccw\",\n        \"zwrite\": \"off\",\n        \"vs\": \"flowwater_new\",\n        \"fs\": \"flowwater_new\"\n      }\n    ],\n    \"shadowgen\": [],\n    \"bone\": [],\n    \"shadowuse\": []\n  }\n}","flowwater_new.vs.glsl":"attribute highp vec3 _glesVertex;\nattribute mediump vec2 _glesMultiTexCoord0;\nattribute lowp vec4 _glesColor;\n\nuniform lowp vec4 _MainColor;\nuniform lowp float _alphaRate;\nuniform lowp float _colorRate;\n\nuniform highp mat4 glstate_matrix_mvp;\nuniform mediump vec4 _MainTex_ST;\nuniform lowp float _speedu;\nuniform lowp float _speedv;\nuniform lowp float glstate_timer;\n\nvarying mediump vec2 _base_uv;\nvarying lowp vec4 attcolor;\n\n\n#ifdef FOG\nuniform lowp float glstate_fog_start;\nuniform lowp float glstate_fog_end;\nvarying lowp float factor;\n#endif\n\nvoid main()\n{\n\thighp vec4 position=vec4(_glesVertex.xyz,1.0);\n\n    lowp vec2 _speed= vec2(_speedu,_speedv);\n\t_base_uv = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw+ _speed * glstate_timer;\n\tattcolor= _MainColor;\n\tattcolor.rgb=attcolor.rgb*_colorRate;\n\tattcolor.a=attcolor.a*_alphaRate;\n\t\n    #ifdef FOG\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start); \n    factor = clamp(factor, 0.0, 1.0);  \n    #endif\n\n\tposition = (glstate_matrix_mvp * position);\n\tgl_Position = position;\n}\n\n","mask_add_tint.shader.json":"{\n    \"layer\": \"transparent\",\n\t\"properties\": [\n        \"_MainTex('MainTex',Texture)='white'{}\",\n        \"_Mask('Mask',Texture)='white'{}\",\n        \"_MainTex_ST('MainTex_ST',Vector)=(1,1,0,0)\",\n        \"_Mask_ST('Mask_ST',Vector)=(1,1,0,0)\",\n        \"_Main_Color('Main_Color', Color) = (1,1,1,1)\",\n        \"_mixAlphaRate('mixAlphaRate',Float) = 1\",\n        \"_mixColorRate('mixColorRate',Float) = 1\"\n    ],\n    \"passes\": {\n        \"base\": [\n            {\n                \"showface\": \"all\",\n                \"blendmode\": \"add\",\n                \"zwrite\": \"off\",\n                \"ztest\":\"on\",\n                \"vs\": \"mask_trans_tint\",\n                \"fs\": \"mask_trans_tint\"\n            }\n        ],\n        \"base_fog\": [\n            {\n                \"showface\": \"all\",\n                \"blendmode\": \"add\",\n                \"zwrite\": \"off\",\n                \"ztest\":\"on\",\n                \"vs\": \"mask_trans_tint\",\n                \"fs\": \"mask_trans_tint\"\n            }\n        ],\n        \"skin\": [\n            {\n                \"showface\": \"all\",\n                \"blendmode\": \"add\",\n                \"zwrite\": \"off\",\n                \"ztest\":\"on\",\n                \"vs\": \"mask_trans_tint\",\n                \"fs\": \"mask_trans_tint\"\n            }\n        ],\n        \"skin_fog\": [\n            {\n                \"showface\": \"all\",\n                \"blendmode\": \"add\",\n                \"zwrite\": \"off\",\n                \"ztest\":\"on\",\n                \"vs\": \"mask_trans_tint\",\n                \"fs\": \"mask_trans_tint\"\n            }\n        ],\n        \"shadowgen\": [],\n        \"bone\": [],\n        \"shadowuse\": []\n    }\n}","mask_add_tint_uvroll.shader.json":"{\n    \"layer\": \"transparent\",\n\t\"properties\": [\n        \"_MainTex('MainTex',Texture)='white'{}\",\n        \"_Mask('Mask',Texture)='white'{}\",\n        \"_MainTex_ST('MainTex_ST',Vector)=(1,1,0,0)\",\n        \"_Mask_ST('Mask_ST',Vector)=(1,1,0,0)\",\n        \"_Main_Color('Main_Color', Color) = (1,1,0,1)\",\n        \"_speedu('speedu',Float) = -1\",\n        \"_speedv('speedv',Float) = 0\"\n    ],\n    \"passes\": {\n        \"base\": [\n            {\n                \"showface\": \"all\",\n                \"blendmode\": \"add\",\n                \"zwrite\": \"off\",\n                \"ztest\":\"on\",\n                \"vs\": \"mask_trans_tint\",\n                \"fs\": \"mask_trans_tint\"\n            }\n        ],\n        \"base_fog\": [\n            {\n                \"showface\": \"all\",\n                \"blendmode\": \"add\",\n                \"zwrite\": \"off\",\n                \"ztest\":\"on\",\n                \"vs\": \"mask_trans_tint\",\n                \"fs\": \"mask_trans_tint\"\n            }\n        ],\n        \"skin\": [\n            {\n                \"showface\": \"all\",\n                \"blendmode\": \"add\",\n                \"zwrite\": \"off\",\n                \"ztest\":\"on\",\n                \"vs\": \"mask_trans_tint\",\n                \"fs\": \"mask_trans_tint\"\n            }\n        ],\n        \"skin_fog\": [\n            {\n                \"showface\": \"all\",\n                \"blendmode\": \"add\",\n                \"zwrite\": \"off\",\n                \"ztest\":\"on\",\n                \"vs\": \"mask_trans_tint\",\n                \"fs\": \"mask_trans_tint\"\n            }\n        ],\n        \"shadowgen\": [],\n        \"bone\": [],\n        \"shadowuse\": []\n    }\n}","mask_blend_tint.shader.json":"{\n    \"layer\": \"transparent\",\n\t\"properties\": [\n        \"_MainTex('MainTex',Texture)='white'{}\",\n        \"_Mask('Mask',Texture)='white'{}\",\n        \"_MainTex_ST('MainTex_ST',Vector)=(1,1,0,0)\",\n        \"_Mask_ST('Mask_ST',Vector)=(1,1,0,0)\",\n        \"_Main_Color('Main_Color', Color) = (1,1,0,1)\"\n    ],\n    \"passes\": {\n        \"base\": [\n            {\n                \"showface\": \"all\",\n                \"blendmode\": \"blend\",\n                \"zwrite\": \"off\",\n                \"ztest\":\"on\",\n                \"vs\": \"mask_trans_tint\",\n                \"fs\": \"mask_trans_tint\"\n            }\n        ],\n        \"base_fog\": [\n            {\n                \"showface\": \"all\",\n                \"blendmode\": \"blend\",\n                \"zwrite\": \"off\",\n                \"ztest\":\"on\",\n                \"vs\": \"mask_trans_tint\",\n                \"fs\": \"mask_trans_tint\"\n            }\n        ],\n        \"skin\": [\n            {\n                \"showface\": \"all\",\n                \"blendmode\": \"blend\",\n                \"zwrite\": \"off\",\n                \"ztest\":\"on\",\n                \"vs\": \"mask_trans_tint\",\n                \"fs\": \"mask_trans_tint\"\n            }\n        ],\n        \"skin_fog\": [\n            {\n                \"showface\": \"all\",\n                \"blendmode\": \"blend\",\n                \"zwrite\": \"off\",\n                \"ztest\":\"on\",\n                \"vs\": \"mask_trans_tint\",\n                \"fs\": \"mask_trans_tint\"\n            }\n        ],\n        \"shadowgen\": [],\n        \"bone\": [],\n        \"shadowuse\": []\n    }\n}","mask_blend_tint_uvroll.shader.json":"{\n    \"layer\": \"transparent\",\n\t\"properties\": [\n        \"_MainTex('MainTex',Texture)='white'{}\",\n        \"_Mask('Mask',Texture)='white'{}\",\n        \"_MainTex_ST('MainTex_ST',Vector)=(1,1,0,0)\",\n        \"_Mask_ST('Mask_ST',Vector)=(1,1,0,0)\",\n        \"_Main_Color('Main_Color', Color) = (1,1,0,1)\",\n        \"_speedu('speedu',Float) = -1\",\n        \"_speedv('speedv',Float) = 0\"\n    ],\n    \"passes\": {\n        \"base\": [\n            {\n                \"showface\": \"all\",\n                \"blendmode\": \"blend\",\n                \"zwrite\": \"off\",\n                \"ztest\":\"on\",\n                \"vs\": \"mask_trans_tint\",\n                \"fs\": \"mask_trans_tint\"\n            }\n        ],\n        \"base_fog\": [\n            {\n                \"showface\": \"all\",\n                \"blendmode\": \"blend\",\n                \"zwrite\": \"off\",\n                \"ztest\":\"on\",\n                \"vs\": \"mask_trans_tint\",\n                \"fs\": \"mask_trans_tint\"\n            }\n        ],\n        \"skin\": [\n            {\n                \"showface\": \"all\",\n                \"blendmode\": \"blend\",\n                \"zwrite\": \"off\",\n                \"ztest\":\"on\",\n                \"vs\": \"mask_trans_tint\",\n                \"fs\": \"mask_trans_tint\"\n            }\n        ],\n        \"skin_fog\": [\n            {\n                \"showface\": \"all\",\n                \"blendmode\": \"blend\",\n                \"zwrite\": \"off\",\n                \"ztest\":\"on\",\n                \"vs\": \"mask_trans_tint\",\n                \"fs\": \"mask_trans_tint\"\n            }\n        ],\n        \"shadowgen\": [],\n        \"bone\": [],\n        \"shadowuse\": []\n    }\n}","mask_trans_tint.fs.glsl":"uniform sampler2D _MainTex; \nuniform sampler2D _Mask; \nuniform mediump vec4 _Main_Color;\n\nvarying mediump vec2 _maintex_uv;\nvarying mediump vec2 _mask_uv;\n\nuniform lowp float _mixColorRate;\nuniform lowp float _mixAlphaRate;\n\n//texture2DEtC1Mark\n\n#ifdef LIGHTMAP\nuniform lowp sampler2D _LightmapTex;\nvarying mediump vec2 lightmap_TEXCOORD;\nlowp vec3 decode_hdr(lowp vec4 data)\n{\n    lowp float power =pow( 2.0 ,data.a * 255.0 - 128.0);\n    return data.rgb * power * 2.0 ;\n}\n#endif\n\n#ifdef FOG\nuniform lowp vec4 glstate_fog_color; \nvarying lowp float factor;\n#endif\nvoid main()    \n{\n    highp vec4 basecolor=texture2D(_MainTex,_maintex_uv);\n    highp vec4 maskcolor=texture2D(_Mask,_mask_uv);\n\n    lowp vec3 tempcolor=_Main_Color.rgb*basecolor.rgb*maskcolor.rgb*_mixColorRate;\n    lowp float tempAlpha=_Main_Color.a*basecolor.a*maskcolor.a*_mixAlphaRate;\n    lowp vec4 emission=vec4(tempcolor,tempAlpha);\n\n    //----------------------------------------------------------\n    #ifdef LIGHTMAP\n    lowp vec4 lightmap = texture2D(_LightmapTex, lightmap_TEXCOORD);\n    emission.xyz *= decode_hdr(lightmap);\n    #endif\n\n    #ifdef FOG\n    emission= mix(vec4(0,0,0,0), emission, factor);\n\n    //emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\n    #endif\n    gl_FragData[0] = emission;\n\n\n}\n","mask_trans_tint.vs.glsl":"attribute highp vec3 _glesVertex;\nattribute mediump vec2 _glesMultiTexCoord0;\nuniform highp mat4 glstate_matrix_mvp;\n\nuniform mediump vec4 _MainTex_ST;\nuniform mediump vec4 _Mask_ST;\nvarying mediump vec2 _maintex_uv;\nvarying mediump vec2 _mask_uv;\n\n#ifdef LIGHTMAP\nattribute mediump vec4 _glesMultiTexCoord1;\nuniform mediump vec4 glstate_lightmapOffset;\n// uniform mediump float glstate_lightmapUV;\nvarying mediump vec2 lightmap_TEXCOORD;\n#endif\n\n#ifdef FOG\nuniform lowp float glstate_fog_start;\nuniform lowp float glstate_fog_end;\nvarying lowp float factor;\n#endif\n\n#ifdef SKIN\nattribute lowp vec4 _glesBlendIndex4;\nattribute lowp vec4 _glesBlendWeight4;\nuniform highp vec4 glstate_vec4_bones[110];\nmat4 buildMat4(int index)\n{\n\tvec4 quat = glstate_vec4_bones[index * 2 + 0];\n\tvec4 translation = glstate_vec4_bones[index * 2 + 1];\n\tfloat xy = 2.0 * quat.x * quat.y;\n\tfloat xz = 2.0 * quat.x * quat.z;\n\tfloat xw = 2.0 * quat.x * quat.w;\n\tfloat yz = 2.0 * quat.y * quat.z;\n\tfloat yw = 2.0 * quat.y * quat.w;\n\tfloat zw = 2.0 * quat.z * quat.w;\n\tfloat xx = 2.0*quat.x * quat.x;\n\tfloat yy = 2.0*quat.y * quat.y;\n\tfloat zz = 2.0*quat.z * quat.z;\n\tfloat ww = 2.0*quat.w * quat.w;\n\tfloat s = translation.w;\n\tmat4 matrix = mat4(\n\t(1.0-yy-zz)*s, (xy+zw)*s, (xz-yw)*s, 0,\n\t(xy-zw)*s, (1.0-xx-zz)*s, (yz + xw)*s, 0,\n\t(xz + yw)*s, (yz - xw)*s, (1.0-xx-yy)*s, 0,\n\ttranslation.x, translation.y, translation.z, 1);\n\treturn matrix;\n}\n\nhighp vec4 calcVertex(highp vec4 srcVertex,lowp vec4 blendIndex,lowp vec4 blendWeight)\n{\n\tint i = int(blendIndex.x);\n    int i2 =int(blendIndex.y);\n\tint i3 =int(blendIndex.z);\n\tint i4 =int(blendIndex.w);\n\n    mat4 mat = buildMat4(i)*blendWeight.x\n\t\t\t + buildMat4(i2)*blendWeight.y\n\t\t\t + buildMat4(i3)*blendWeight.z\n\t\t\t + buildMat4(i4)*blendWeight.w;\n\treturn mat* srcVertex;\n}\n#endif\n\nvoid main()\n{\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\n\n    _maintex_uv = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    _mask_uv = _glesMultiTexCoord0.xy * _Mask_ST.xy + _Mask_ST.zw;\n    //----------------------------------------------------------\n    #ifdef LIGHTMAP\n    mediump vec2 beforelightUV = _glesMultiTexCoord1.xy;\n    lowp float u = beforelightUV.x * glstate_lightmapOffset.x + glstate_lightmapOffset.z;\n    lowp float v = beforelightUV.y * glstate_lightmapOffset.y + glstate_lightmapOffset.w;\n    lightmap_TEXCOORD = vec2(u,v);\n    #endif\n\n    #ifdef SKIN\n    position=calcVertex(position,_glesBlendIndex4,_glesBlendWeight4);\n    #endif\n    position =glstate_matrix_mvp * position;\n\n    #ifdef FOG\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\n    factor = clamp(factor, 0.0, 1.0);\n    #endif\n\n\tgl_Position = position;\n}","particlesystem.fs.glsl":"\nprecision mediump float;\n\nvarying vec2 v_uv;\n\nuniform vec4 _TintColor;\nuniform sampler2D _MainTex;\n\nvarying vec4 v_color;\n\n#ifdef FOG\nuniform lowp vec4 glstate_fog_color; \nvarying lowp float factor;\n#endif\n\nvoid main()\n{\n    vec4 color = 2.0 * v_color * _TintColor * texture2D(_MainTex, v_uv);\n\n    #ifdef FOG\n        color.xyz = mix(glstate_fog_color.rgb, color.rgb, factor);\n    #endif\n    \n    gl_FragColor = color;\n}","particlesystem.vs.glsl":"\nprecision mediump float;  \n\n//坐标属性\nattribute vec3 _glesVertex;\nattribute vec2 _glesMultiTexCoord0;\n\nuniform mat4 glstate_matrix_mvp;\n\nuniform vec4 _MainTex_ST;\n\nuniform float _UVSpeedX;\nuniform float _UVSpeedY;\nuniform float glstate_timer;\n\nvarying vec4 v_color;\nvarying vec2 v_uv;\n\n#ifdef INSTANCE\n    attribute vec4 a_particle_position;\n    attribute vec4 a_particle_scale;\n    attribute vec4 a_particle_rotation;\n    attribute vec4 a_particle_color;\n    attribute vec4 a_particle_tilingOffset;\n    attribute vec4 a_particle_flipUV;\n#else\n    uniform vec4 a_particle_position;\n    uniform vec4 a_particle_scale;\n    uniform vec4 a_particle_rotation;\n    uniform vec4 a_particle_color;\n    uniform vec4 a_particle_tilingOffset;\n    uniform vec4 a_particle_flipUV;\n#endif\n\nuniform mat4 u_particle_billboardMatrix;\nuniform vec4 u_particle_pivotOffset;\n\n#ifdef FOG\nuniform lowp float glstate_fog_start;\nuniform lowp float glstate_fog_end;\nvarying lowp float factor;\n#endif\n\nmat3 makeParticleRotationMatrix(vec3 rotation)\n{\n    float DEG2RAD = 3.1415926 / 180.0;\n    \n    float rx = rotation.x * DEG2RAD;\n    float ry = rotation.y * DEG2RAD;\n    float rz = rotation.z * DEG2RAD;\n\n    float sinX = sin(rx);\n    float cosX = cos(rx);\n    float sinY = sin(ry);\n    float cosY = cos(ry);\n    float sinZ = sin(rz);\n    float cosZ = cos(rz);\n\n    mat3 tmp;\n    float ce = cosY * cosZ;\n    float cf = cosY * sinZ;\n    float de = sinY * cosZ;\n    float df = sinY * sinZ;\n\n    float te0 = ce + df * sinX;\n    float te4 = de * sinX - cf;\n    float te8 = cosX * sinY;\n\n    float te1 = cosX * sinZ;\n    float te5 = cosX * cosZ;\n    float te9 = - sinX;\n\n    float te2 = cf * sinX - de;\n    float te6 = df + ce * sinX;\n    float te10 = cosX * cosY;\n\n    tmp[0] = vec3(te0, te1, te2);\n    tmp[1] = vec3(te4, te5, te6);\n    tmp[2] = vec3(te8, te9, te10);\n            \n    return tmp;\n}\n\nvec4 particleAnimation(vec4 position) \n{\n    mat3 billboardMatrix = mat3(u_particle_billboardMatrix[0].xyz,u_particle_billboardMatrix[1].xyz,u_particle_billboardMatrix[2].xyz);\n    \n    position.xyz = position.xyz + u_particle_pivotOffset.xyz;\n    \n    // 计算缩放\n    position.xyz = position.xyz * a_particle_scale.xyz;\n\n    // 计算旋转\n    mat3 rMat = makeParticleRotationMatrix(a_particle_rotation.xyz);\n    position.xyz = rMat * position.xyz;\n    position.xyz = billboardMatrix * position.xyz;\n\n    // 位移\n    position.xyz = position.xyz + a_particle_position.xyz;\n\n    // 颜色\n    v_color = a_particle_color;\n\n    if(a_particle_flipUV.x > 0.5) v_uv.x = 1.0 - v_uv.x;\n    if(a_particle_flipUV.y > 0.5) v_uv.y = 1.0 - v_uv.y;\n    v_uv = v_uv * a_particle_tilingOffset.xy + a_particle_tilingOffset.zw;\n    \n    return position;\n}\n\nvoid main() \n{\n    vec4 position = vec4(_glesVertex.xyz, 1.0);\n    //输出uv\n    v_uv = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n\n    position = particleAnimation(position);\n\n    v_uv = v_uv + vec2(_UVSpeedX,_UVSpeedY) * glstate_timer;\n\n    //计算投影坐标\n    position = glstate_matrix_mvp * position;\n\n    #ifdef FOG\n        factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\n        factor = clamp(factor, 0.0, 1.0);\n    #endif\n\n    gl_Position = position;\n}","particlesystem_additive.shader.json":"{\n  \"layer\": \"transparent\",\n  \"queue\": 0,\n  \"properties\": [\n    \"_MainTex('MainTex',Texture)='white'{}\",\n    \"_TintColor ('Tint Color', Color) = (0.5,0.5,0.5,0.5)\",\n    \"_UVSpeedX('UV SpeedX',float) = 0.0\",\n    \"_UVSpeedY('UV SpeedY',float) = 0.0\"\n  ],\n  \"passes\": {\n    \"base\": [\n      {\n        \"blendmode\": \"add\",\n        \"showface\": \"all\",\n        \"zwrite\": \"off\",\n        \"vs\": \"particlesystem\",\n        \"fs\": \"particlesystem\"\n      }\n    ],\n    \"base_fog\": [\n      {\n        \"blendmode\": \"add\",\n        \"showface\": \"all\",\n        \"zwrite\": \"off\",\n        \"vs\": \"particlesystem\",\n        \"fs\": \"particlesystem\"\n      }\n    ],\n    \"instance\": [\n      {\n        \"blendmode\": \"add\",\n        \"showface\": \"all\",\n        \"zwrite\": \"off\",\n        \"vs\": \"particlesystem\",\n        \"fs\": \"particlesystem\"\n      }\n    ],\n    \"instance_fog\": [\n      {\n        \"blendmode\": \"add\",\n        \"showface\": \"all\",\n        \"zwrite\": \"off\",\n        \"vs\": \"particlesystem\",\n        \"fs\": \"particlesystem\"\n      }\n    ]\n  }\n}","particlesystem_alphablended.shader.json":"{\n  \"layer\": \"transparent\",\n  \"queue\": 0,\n  \"properties\": [\n    \"_MainTex('MainTex',Texture)='white'{}\",\n    \"_TintColor ('Tint Color', Color) = (0.5,0.5,0.5,0.5)\",\n    \"_UVSpeedX('UV SpeedX',float) = 0.0\",\n    \"_UVSpeedY('UV SpeedY',float) = 0.0\"\n  ],\n  \"passes\": {\n    \"base\": [\n      {\n        \"blendmode\": \"blend\",\n        \"showface\": \"all\",\n        \"zwrite\": \"off\",\n        \"vs\": \"particlesystem\",\n        \"fs\": \"particlesystem\"\n      }\n    ],\n    \"base_fog\": [\n      {\n        \"blendmode\": \"blend\",\n        \"showface\": \"all\",\n        \"zwrite\": \"off\",\n        \"vs\": \"particlesystem\",\n        \"fs\": \"particlesystem\"\n      }\n    ],\n    \"instance\": [\n      {\n        \"blendmode\": \"blend\",\n        \"showface\": \"all\",\n        \"zwrite\": \"off\",\n        \"vs\": \"particlesystem\",\n        \"fs\": \"particlesystem\"\n      }\n    ],\n    \"instance_fog\": [\n      {\n        \"blendmode\": \"blend\",\n        \"showface\": \"all\",\n        \"zwrite\": \"off\",\n        \"vs\": \"particlesystem\",\n        \"fs\": \"particlesystem\"\n      }\n    ]\n  }\n}","particles_add.shader.json":"{\n  \"layer\": \"transparent\",\n  \"queue\":  0,\n  \"properties\": [\n\t\t\"_Main_Tex('MainTex',Texture)='white'{}\",\n        \"_Main_Color ('Tint Color', Color) = (1.0,1.0,1.0,1.0)\"\n    ],\n    \"passes\": {\n        \"base\": [\n          {\n            \"blendmode\": \"add\",\n            \"showface\": \"all\",\n            \"zwrite\": \"off\",\n            \"vs\": \"f14trans\",\n            \"fs\": \"f14trans\"\n          }\n        ],\n        \"shadowgen\": [],  \n        \"bone\": [],\n        \"shadowuse\": []\n    }\n}","particles_add_notest.shader.json":"{\n  \"layer\": \"transparent\",\n  \"queue\":  0,\n  \"properties\": [\n\t\t\"_Main_Tex('MainTex',Texture)='white'{}\",\n        \"_Main_Color ('Tint Color', Color) = (1.0,1.0,1.0,1.0)\"\n    ],\n    \"passes\": {\n        \"base\": [\n          {\n            \"blendmode\": \"add\",\n            \"showface\": \"all\",\n            \"zwrite\": \"off\",\n            \"ztest\":\"off\",\n            \"vs\": \"f14trans\",\n            \"fs\": \"f14trans\"\n          }\n        ],\n        \"shadowgen\": [],  \n        \"bone\": [],\n        \"shadowuse\": []\n    }\n}","particles_blend.shader.json":"{\n  \"layer\": \"transparent\",\n  \"queue\":  0,\n  \"properties\": [\n\t\t\"_Main_Tex('MainTex',Texture)='white'{}\",\n        \"_Main_Color ('Tint Color', Color) = (1.0,1.0,1.0,1.0)\"\n    ],\n    \"passes\": {\n        \"base\": [\n          {\n            \"blendmode\": \"blend\",\n            \"showface\": \"all\",\n            \"zwrite\": \"off\",\n            \"vs\": \"f14trans\",\n            \"fs\": \"f14trans\"\n          }\n        ],\n        \"shadowgen\": [],  \n        \"bone\": [],\n        \"shadowuse\": []\n    }\n}","particles_blend_notest.shader.json":"{\n  \"layer\": \"transparent\",\n  \"queue\":  0,\n  \"properties\": [\n\t\t\"_Main_Tex('MainTex',Texture)='white'{}\",\n        \"_Main_Color ('Tint Color', Color) = (1.0,1.0,1.0,1.0)\"\n    ],\n    \"passes\": {\n        \"base\": [\n          {\n            \"blendmode\": \"blend\",\n            \"showface\": \"all\",\n            \"zwrite\": \"off\",\n            \"ztest\":\"off\",\n            \"vs\": \"f14trans\",\n            \"fs\": \"f14trans\"\n          }\n        ],\n        \"shadowgen\": [],  \n        \"bone\": [],\n        \"shadowuse\": []\n    }\n}","particles_diffuse.shader.json":"{\n  \"layer\": \"transparent\",\n  \"queue\":  0,\n  \"properties\": [\n\t\t\"_Main_Tex('MainTex',Texture)='white'{}\",\n        \"_Main_Color ('Tint Color', Color) = (1.0,1.0,1.0,1.0)\"\n    ],\n    \"passes\": {\n        \"base\": [\n          {\n            \"showface\": \"ccw\",\n            \"vs\": \"f14trans\",\n            \"fs\": \"f14trans\"\n          }\n        ],\n        \"shadowgen\": [],  \n        \"bone\": [],\n        \"shadowuse\": []\n    }\n}","particle_mask_add_tint.shader.json":"{\n    \"layer\": \"transparent\",\n\t\"properties\": [\n        \"_Main_Tex('MainTex',Texture)='white'{}\",\n        \"_Mask('Mask',Texture)='white'{}\",\n        \"_Main_Tex_ST('MainTex_ST',Vector)=(1,1,0,0)\",\n        \"_Mask_ST('Mask_ST',Vector)=(1,1,0,0)\",\n        \"_Main_Color('Main_Color', Color) = (1,1,1,1)\",\n        \"_mixAlphaRate('mixAlphaRate',Float) = 1\",\n        \"_mixColorRate('mixColorRate',Float) = 1\"\n    ],\n    \"passes\": {\n        \"base\": [\n            {\n                \"showface\": \"all\",\n                \"blendmode\": \"add\",\n                \"zwrite\": \"off\",\n                \"ztest\":\"on\",\n                \"vs\": \"par_mask_tint\",\n                \"fs\": \"par_mask_tint\"\n            }\n        ],\n        \"shadowgen\": [],\n        \"bone\": [],\n        \"shadowuse\": []\n    }\n}","particle_mask_blend_tint.shader.json":"{\n    \"layer\": \"transparent\",\n\t\"properties\": [\n        \"_Main_Tex('MainTex',Texture)='white'{}\",\n        \"_Mask('Mask',Texture)='white'{}\",\n        \"_Main_Tex_ST('MainTex_ST',Vector)=(1,1,0,0)\",\n        \"_Mask_ST('Mask_ST',Vector)=(1,1,0,0)\",\n        \"_Main_Color('Main_Color', Color) = (1,1,1,1)\",\n        \"_mixAlphaRate('mixAlphaRate',Float) = 1\",\n        \"_mixColorRate('mixColorRate',Float) = 1\"\n    ],\n    \"passes\": {\n        \"base\": [\n            {\n                \"showface\": \"all\",\n                \"blendmode\": \"blend\",\n                \"zwrite\": \"off\",\n                \"ztest\":\"on\",\n                \"vs\": \"par_mask_tint\",\n                \"fs\": \"par_mask_tint\"\n            }\n        ],\n        \"shadowgen\": [],\n        \"bone\": [],\n        \"shadowuse\": []\n    }\n}","par_mask_tint.fs.glsl":"uniform sampler2D _Main_Tex; \nuniform sampler2D _Mask; \n\nvarying mediump vec2 _maintex_uv;\nvarying mediump vec2 _mask_uv;\n\nvarying mediump vec4 v_color;\n\n//texture2DEtC1Mark\n\nvoid main()    \n{\n    highp vec4 basecolor=texture2D(_Main_Tex,_maintex_uv);\n    highp vec4 maskcolor=texture2D(_Mask,_mask_uv);\n\n    mediump vec3 tempcolor=v_color.rgb*basecolor.rgb*maskcolor.rgb;\n    mediump float tempAlpha=v_color.a*basecolor.a*maskcolor.a;\n    mediump vec4 emission=vec4(tempcolor,tempAlpha);\n    \n    gl_FragData[0] = emission;\n}\n","par_mask_tint.vs.glsl":"attribute highp vec3 _glesVertex;\nattribute highp vec4 _glesColor;\nattribute mediump vec2 _glesMultiTexCoord0;\nuniform highp mat4 glstate_matrix_mvp;\n\nuniform mediump vec4 _Main_Tex_ST;\nuniform mediump vec4 _Mask_ST;\nvarying mediump vec2 _maintex_uv;\nvarying mediump vec2 _mask_uv;\n\nuniform mediump vec4 _Main_Color;\nuniform mediump float _mixColorRate;\nuniform mediump float _mixAlphaRate;\n\nvarying mediump vec4 v_color;\n\nvoid main()\n{\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\n\tposition =glstate_matrix_mvp * position;\n\t \n    _maintex_uv = _glesMultiTexCoord0.xy * _Main_Tex_ST.xy + _Main_Tex_ST.zw;\n    _mask_uv = _glesMultiTexCoord0.xy * _Mask_ST.xy + _Mask_ST.zw;\n\tv_color=_glesColor*_Main_Color;\n\tv_color.rgb=v_color.rgb*_mixColorRate;\n\tv_color.a=v_color.a*_mixAlphaRate;\n\n\tgl_Position = position;\n}","post_depth.fs.glsl":"#ifdef GL_FRAGMENT_PRECISION_HIGH  \nprecision highp float;  \n#else  \nprecision mediump float;  \n#endif \n//varying highp vec3 xlv_Normal;   \n\nconst float PackUpscale = 256. / 255.; \n// fraction -> 0..1 (including 1)\nconst float UnpackDownscale = 255. / 256.; \n// 0..1 -> fraction (excluding 1)\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) \n{\n    vec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\n // tidy overflow\n    return r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) \n{\n    return dot( v, UnpackFactors );\n}\nvec2 packDepthToRG( const in float v ) \n{\n    vec2 r = vec2( fract( v * PackFactors.z ), v );\n\tr.y -= r.x * ShiftRight8;\n    return r * PackUpscale;\n}\nfloat unpackRGToDepth( const in vec2 v ) \n{\n    return dot( v.xy, UnpackFactors.zw );\n}\nvec3 packDepthToRGB( const in float v ) \n{\n    vec3 r = vec3( fract( v * PackFactors.yz ), v );\n\tr.yz -= r.xy * ShiftRight8;\n // tidy overflow\n    return r * PackUpscale;\n}\nfloat unpackRGBToDepth( const in vec3 v ) \n{\n    return dot( v.xyz, UnpackFactors.yzw );\n}\nvoid main() \n{\n    float z = gl_FragCoord.z;// fract(gl_FragCoord.z *256.*256.);\n    // highp vec2 normal =xlv_Normal.xy;\n    gl_FragColor=packDepthToRGBA(z);\n}","post_depth.vs.glsl":"#ifdef GL_FRAGMENT_PRECISION_HIGH  \nprecision highp float;  \n#else  \nprecision mediump float;  \n#endif \nattribute vec4 _glesVertex;    \n//attribute vec3 _glesNormal;\n//uniform highp mat4 glstate_matrix_modelview;\nuniform highp mat4 glstate_matrix_mvp;      \n// varying highp vec3 xlv_Normal;                \n       \nvoid main()                                     \n{        \n    // highp mat3 normalMat=mat3(\n    //     glstate_matrix_mvp[0],\n    //     glstate_matrix_mvp[1],\n    //     glstate_matrix_mvp[2]);\n\n    // xlv_Normal=normalMat * _glesNormal;\n    // xlv_Normal+=1.0;\n    // xlv_Normal*=0.5;\n\n    gl_Position = (glstate_matrix_mvp * _glesVertex);  \n}","quad.vs.glsl":"attribute vec4 _glesVertex;\nattribute vec4 _glesMultiTexCoord0;\nuniform highp mat4 glstate_matrix_mvp;\nvarying highp vec2 xlv_TEXCOORD0;\n\nvoid main()\n{\n    highp vec4 tmpvar_1;\n    tmpvar_1.w = 1.0;\n    tmpvar_1.xyz = _glesVertex.xyz;\n    xlv_TEXCOORD0 = _glesMultiTexCoord0.xy;\n    #ifdef QUAD\n    gl_Position = vec4(_glesVertex.xy*2.0,_glesVertex.z,1.0);\n    #else\n    gl_Position = (glstate_matrix_mvp * tmpvar_1);\n    #endif\n}","streamlight.fs.glsl":"uniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _LightTex;\nuniform lowp vec4 _LightColor;\nuniform lowp float _LightRate;\nuniform lowp sampler2D _MaskTex;\nuniform lowp float _AlphaCut;\nvarying mediump vec2 xlv_TEXCOORD0;\nvarying mediump vec2 _StreamLightUV;\n\n#ifdef LIGHTMAP\nuniform lowp sampler2D _LightmapTex;\nvarying mediump vec2 lightmap_TEXCOORD;\nlowp vec3 decode_hdr(lowp vec4 data)\n{\n    lowp float power =pow( 2.0 ,data.a * 255.0 - 128.0);\n    return data.rgb * power * 2.0 ;\n}\n#endif\n\n#ifdef FOG\nuniform lowp vec4 glstate_fog_color; \nvarying lowp float factor;\n#endif\n\n//texture2DEtC1Mark\n\nvoid main() \n{\n    lowp vec4 emission = texture2D(_MainTex, xlv_TEXCOORD0);\n    if(emission.a < _AlphaCut)\n        discard;\n\n    #ifdef LIGHTMAP\n    lowp vec4 lightmap = texture2D(_LightmapTex, lightmap_TEXCOORD);\n    emission.xyz *= decode_hdr(lightmap);\n    #endif\n\n    #ifdef FOG\n    emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\n    #endif\n\n    lowp vec4 light = texture2D(_LightTex, _StreamLightUV) * _LightColor * _LightRate;\n    lowp vec4 mask = texture2D(_MaskTex, xlv_TEXCOORD0);\n    light = min(light,mask);\n\n    emission.rgb += light.rgb;\n    gl_FragData[0] = emission;\n}","streamlight.shader.json":"{\n    \"layer\": \"geometry\",\n    \"properties\": [\n        \"_MainTex('MainTex',Texture)='white'{}\",\n        \"_MainColor ('MainColor', Color) = (1,1,1,1)\",\n        \"_AlphaCut('AlphaCut',Range(0.0,1.0)) = 0.5\",\n        \"_LightTex('Light',Texture) = 'black' {}\",\n        \"_LightColor('LightColor',Color) = (1,1,1,1)\",\n        \"_LightRate('LightRate',Range(0.0,1.0)) = 1.0\",\n\t\t\"_SpeedU('SpeedU',float) = 0.5\",\n\t\t\"_SpeedV('SpeedV',float) = 0.5\",\n\t\t\"_MaskTex('Mask',Texture) = 'white' {}\"\n    ],\n    \"passes\": {\n        \"base\": [\n            {\n                \"showface\": \"ccw\",\n                \"vs\": \"streamlight\",\n                \"fs\": \"streamlight\"\n            }\n        ],\n        \"base_fog\": [\n            {\n                \"showface\": \"ccw\",\n                \"vs\": \"streamlight\",\n                \"fs\": \"streamlight\"\n            }\n        ],\n        \"skin\": [\n            {\n                \"showface\": \"ccw\",\n                \"vs\": \"streamlight\",\n                \"fs\": \"streamlight\"\n            }\n        ],\n        \"skin_fog\": [\n            {\n                \"showface\": \"ccw\",\n                \"vs\": \"streamlight\",\n                \"fs\": \"streamlight\"\n            }\n        ]\n    }\n}","streamlight.vs.glsl":"attribute vec4 _glesVertex;\nattribute vec4 _glesMultiTexCoord0;\nuniform highp mat4 glstate_matrix_mvp;\nuniform lowp float _SpeedU;\nuniform lowp float _SpeedV;\nuniform lowp float glstate_timer;\nuniform mediump vec4 _LightTex_ST;\nuniform mediump vec4 _MainTex_ST;\n\nvarying mediump vec2 xlv_TEXCOORD0;\nvarying mediump vec2 _StreamLightUV;\n\n#ifdef LIGHTMAP\nattribute mediump vec4 _glesMultiTexCoord1;\nuniform mediump vec4 glstate_lightmapOffset;\n// uniform mediump float glstate_lightmapUV;\nvarying mediump vec2 lightmap_TEXCOORD;\n#endif\n\n#ifdef FOG\nuniform lowp float glstate_fog_start;\nuniform lowp float glstate_fog_end;\nvarying lowp float factor;\n#endif\n\n#ifdef SKIN\nattribute lowp vec4 _glesBlendIndex4;\nattribute lowp vec4 _glesBlendWeight4;\nuniform highp vec4 glstate_vec4_bones[110];\nmat4 buildMat4(int index)\n{\n\tvec4 quat = glstate_vec4_bones[index * 2 + 0];\n\tvec4 translation = glstate_vec4_bones[index * 2 + 1];\n\tfloat xy = 2.0 * quat.x * quat.y;\n\tfloat xz = 2.0 * quat.x * quat.z;\n\tfloat xw = 2.0 * quat.x * quat.w;\n\tfloat yz = 2.0 * quat.y * quat.z;\n\tfloat yw = 2.0 * quat.y * quat.w;\n\tfloat zw = 2.0 * quat.z * quat.w;\n\tfloat xx = 2.0*quat.x * quat.x;\n\tfloat yy = 2.0*quat.y * quat.y;\n\tfloat zz = 2.0*quat.z * quat.z;\n\tfloat ww = 2.0*quat.w * quat.w;\n\tfloat s = translation.w;\n\tmat4 matrix = mat4(\n\t(1.0-yy-zz)*s, (xy+zw)*s, (xz-yw)*s, 0,\n\t(xy-zw)*s, (1.0-xx-zz)*s, (yz + xw)*s, 0,\n\t(xz + yw)*s, (yz - xw)*s, (1.0-xx-yy)*s, 0,\n\ttranslation.x, translation.y, translation.z, 1);\n\treturn matrix;\n}\n\nhighp vec4 calcVertex(highp vec4 srcVertex,lowp vec4 blendIndex,lowp vec4 blendWeight)\n{\n\tint i = int(blendIndex.x);\n    int i2 =int(blendIndex.y);\n\tint i3 =int(blendIndex.z);\n\tint i4 =int(blendIndex.w);\n\n    mat4 mat = buildMat4(i)*blendWeight.x\n\t\t\t + buildMat4(i2)*blendWeight.y\n\t\t\t + buildMat4(i3)*blendWeight.z\n\t\t\t + buildMat4(i4)*blendWeight.w;\n\treturn mat* srcVertex;\n}\n#endif\n\nvoid main()\n{\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\n    xlv_TEXCOORD0 = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n\n    //----------------------------------------------------------\n    #ifdef LIGHTMAP\n    mediump vec2 beforelightUV = _glesMultiTexCoord1.xy;\n    lowp float u = beforelightUV.x * glstate_lightmapOffset.x + glstate_lightmapOffset.z;\n    lowp float v = beforelightUV.y * glstate_lightmapOffset.y + glstate_lightmapOffset.w;\n    lightmap_TEXCOORD = vec2(u,v);\n    #endif\n\n    #ifdef SKIN\n    position =calcVertex(position,_glesBlendIndex4,_glesBlendWeight4);\n    #endif\n    position = (glstate_matrix_mvp * position);\n\n    #ifdef FOG\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\n    factor = clamp(factor, 0.0, 1.0);\n    #endif\n\n    lowp vec2 _speed= vec2(_SpeedU,_SpeedV);\n    _StreamLightUV = (_glesMultiTexCoord0.xy * _LightTex_ST.xy + _LightTex_ST.zw)  + _speed * glstate_timer;\n\n    gl_Position =position;\n}","streamlight_bothside.shader.json":"{\n    \"layer\": \"geometry\",\n    \"properties\": [\n        \"_MainTex('MainTex',Texture)='white'{}\",\n        \"_MainColor ('MainColor', Color) = (1,1,1,1)\",\n        \"_AlphaCut('AlphaCut',Range(0.0,1.0)) = 0.5\",\n        \"_LightTex('Light',Texture) = 'black' {}\",\n        \"_LightColor('LightColor',Color) = (1,1,1,1)\",\n        \"_LightRate('LightRate',Range(0.0,1.0)) = 1.0\",\n\t\t\"_SpeedU('SpeedU',float) = 0.5\",\n\t\t\"_SpeedV('SpeedV',float) = 0.5\",\n\t\t\"_MaskTex('Mask',Texture) = 'white' {}\"\n    ],\n    \"passes\": {\n        \"base\": [\n            {\n                \"showface\": \"all\",\n                \"vs\": \"streamlight\",\n                \"fs\": \"streamlight\"\n            }\n        ],\n        \"base_fog\": [\n            {\n                \"showface\": \"all\",\n                \"vs\": \"streamlight\",\n                \"fs\": \"streamlight\"\n            }\n        ],\n        \"skin\": [\n            {\n                \"showface\": \"all\",\n                \"vs\": \"streamlight\",\n                \"fs\": \"streamlight\"\n            }\n        ],\n        \"skin_fog\": [\n            {\n                \"showface\": \"all\",\n                \"vs\": \"streamlight\",\n                \"fs\": \"streamlight\"\n            }   \n        ]\n    }\n}","terrain.fs.glsl":"uniform lowp sampler2D _Splat0;\nuniform lowp sampler2D _Splat1;\nuniform lowp sampler2D _Splat2;\nuniform lowp sampler2D _Splat3;\nuniform lowp sampler2D _Control;\n\nvarying lowp vec2 xlv_TEXCOORD0;\nvarying lowp vec2 uv_Splat0;\nvarying lowp vec2 uv_Splat1;\nvarying lowp vec2 uv_Splat2;\nvarying lowp vec2 uv_Splat3;\n\n#ifdef LIGHTMAP\nuniform lowp sampler2D _LightmapTex;\nvarying mediump vec2 lightmap_TEXCOORD;\nlowp vec3 decode_hdr(lowp vec4 data)\n{\n    lowp float power =pow( 2.0 ,data.a * 255.0 - 128.0);\n    return data.rgb * power * 2.0 ;\n}\n#endif\n\n#ifdef FOG\nuniform lowp vec4 glstate_fog_color; \nvarying lowp float factor;\n#endif\n\n//texture2DEtC1Mark\n\nvoid main() \n{\n    lowp vec4 control = texture2D(_Control, xlv_TEXCOORD0);\n    lowp vec3 lay1 = texture2D(_Splat0,uv_Splat0).xyz;\n    lowp vec3 lay2 = texture2D(_Splat1,uv_Splat1).xyz;\n    lowp vec3 lay3 = texture2D(_Splat2,uv_Splat2).xyz;\n    lowp vec3 lay4 = texture2D(_Splat3,uv_Splat3).xyz;\n    lowp vec4 emission = vec4(lay1*control.r + lay2*control.g + lay3*control.b + lay4*(control.a),1.0);\n\n    #ifdef LIGHTMAP\n    lowp vec4 lightmap = texture2D(_LightmapTex, lightmap_TEXCOORD);\n    emission.xyz *= decode_hdr(lightmap);\n    #endif\n\n    #ifdef FOG\n    emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\n    #endif\n\n    gl_FragData[0] = emission;\n}","terrain.shader.json":"{\n    \"layer\": \"geometry\",\n    \"properties\": [\n        \"_Splat0('Layer 1',Texture) = 'white'{}\",\n        \"_Splat1('layer 2',Texture) = 'white'{}\",\n        \"_Splat2('layer 3',Texture) = 'white'{}\",\n        \"_Splat3('layer 4',Texture) = 'white'{}\",\n        \"_Control('Control (RGBA)',Texture) = 'white'{}\"\n    ],\n    \"passes\": {\n        \"base\": [\n            {\n                \"showface\": \"ccw\",\n                \"vs\": \"terrain\",\n                \"fs\": \"terrain\"\n            }\n        ],\n        \"base_fog\": [\n            {\n                \"showface\": \"ccw\",\n                \"vs\": \"terrain\",\n                \"fs\": \"terrain\"\n            }\n        ],\n\t\t\"lightmap\": [\n            {\n                \"showface\": \"ccw\",\n                \"vs\": \"terrain\",\n                \"fs\": \"terrain\"\n            }\n        ],\n        \"lightmap_fog\": [\n            {\n                \"showface\": \"ccw\",\n                \"vs\": \"terrain\",\n                \"fs\": \"terrain\"\n            }\n        ]\n    }\n}","terrain.vs.glsl":"attribute vec4 _glesVertex;\nattribute lowp vec4 _glesMultiTexCoord0;\n\nuniform highp mat4 glstate_matrix_mvp;\n\nuniform lowp vec4 _Splat0_ST;\nuniform lowp vec4 _Splat1_ST;\nuniform lowp vec4 _Splat2_ST;\nuniform lowp vec4 _Splat3_ST;\n\nvarying lowp vec2 xlv_TEXCOORD0;\nvarying lowp vec2 uv_Splat0;\nvarying lowp vec2 uv_Splat1;\nvarying lowp vec2 uv_Splat2;\nvarying lowp vec2 uv_Splat3;\n\n#ifdef LIGHTMAP\nattribute mediump vec4 _glesMultiTexCoord1;\nuniform mediump vec4 glstate_lightmapOffset;\nvarying mediump vec2 lightmap_TEXCOORD;\n#endif\n\n#ifdef FOG\nuniform lowp float glstate_fog_start;\nuniform lowp float glstate_fog_end;\nvarying lowp float factor;\n#endif\n\nvoid main()\n{\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\n\n\txlv_TEXCOORD0 = _glesMultiTexCoord0.xy;\n    uv_Splat0 = _glesMultiTexCoord0.xy * _Splat0_ST.xy + _Splat0_ST.zw;\n    uv_Splat1 = _glesMultiTexCoord0.xy * _Splat1_ST.xy + _Splat1_ST.zw;\n    uv_Splat2 = _glesMultiTexCoord0.xy * _Splat2_ST.xy + _Splat2_ST.zw;\n    uv_Splat3 = _glesMultiTexCoord0.xy * _Splat3_ST.xy + _Splat3_ST.zw;\n    \n\n    //----------------------------------------------------------\n    #ifdef LIGHTMAP\n    mediump vec2 beforelightUV = _glesMultiTexCoord1.xy;\n    lowp float u = beforelightUV.x * glstate_lightmapOffset.x + glstate_lightmapOffset.z;\n    lowp float v = beforelightUV.y * glstate_lightmapOffset.y + glstate_lightmapOffset.w;\n    lightmap_TEXCOORD = vec2(u,v);\n    #endif\n\n    position = (glstate_matrix_mvp * position);\n\n    #ifdef FOG\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start); \n    factor = clamp(factor, 0.0, 1.0);  \n    #endif\n\n    gl_Position = position;\n}","transparent.fs.glsl":"uniform lowp sampler2D _MainTex;                                                                                                \nvarying highp vec2 xlv_TEXCOORD0;\nuniform lowp float _Alpha;\nuniform lowp float _Superimposition;\n\n#ifdef FOG\nuniform lowp vec4 glstate_fog_color; \nvarying lowp float factor;\n#endif\n\n//texture2DEtC1Mark\n\nvoid main() \n{\n    lowp vec4 emission = texture2D(_MainTex, xlv_TEXCOORD0);\n    emission.a=emission.a*_Alpha;\n    emission.xyz *= _Superimposition;\n    //----------------------------------------------------------\n    #ifdef FOG\n    emission.xyz= mix(glstate_fog_color.xyz, emission.xyz, factor);\n    #endif\n    gl_FragData[0] = emission;\n\n}","transparent.shader.json":"{\n    \"layer\": \"transparent\",\n\t\"properties\": [\n        \"_MainTex('MainTex',Texture)='white'{}\",\n        \"_Alpha('Alpha', Range(0.0, 1.0)) = 1.0\",\n        \"_Superimposition('Superimposition', Range(0.0, 7.0)) = 1.0\"\n    ],\n    \"passes\": {\n        \"base\": [\n            {\n                \"blendmode\": \"blend\",\n                \"showface\": \"ccw\",\n                \"vs\": \"transparent\",\n                \"fs\": \"transparent\"\n            }\n        ],\n        \"base_fog\": [\n            {\n                \"blendmode\": \"blend\",\n                \"showface\": \"ccw\",\n                \"vs\": \"transparent\",\n                \"fs\": \"transparent\"\n            }\n        ],\n        \"skin\": [\n            {\n                \"blendmode\": \"blend\",\n                \"showface\": \"ccw\",\n                \"vs\": \"transparent\",\n                \"fs\": \"transparent\"\n            }\n        ],\n        \"skin_fog\": [\n            {\n                \"blendmode\": \"blend\",\n                \"showface\": \"ccw\",\n                \"vs\": \"transparent\",\n                \"fs\": \"transparent\"\n            }\n        ],\n        \"shadowgen\": [],\n        \"bone\": [],\n        \"shadowuse\": []\n    }\n}","transparent.vs.glsl":"attribute highp vec4 _glesVertex;\nattribute mediump vec4 _glesMultiTexCoord0;\nuniform highp mat4 glstate_matrix_mvp;\nuniform mediump vec4 _MainTex_ST;\n\nvarying mediump vec2 xlv_TEXCOORD0;\n\n#ifdef FOG\nuniform lowp float glstate_fog_start;\nuniform lowp float glstate_fog_end;\nvarying lowp float factor;\n#endif\n\n#ifdef SKIN\nattribute lowp vec4 _glesBlendIndex4;\nattribute lowp vec4 _glesBlendWeight4;\nuniform highp vec4 glstate_vec4_bones[110];\nmat4 buildMat4(int index)\n{\n\tvec4 quat = glstate_vec4_bones[index * 2 + 0];\n\tvec4 translation = glstate_vec4_bones[index * 2 + 1];\n\tfloat xy = 2.0 * quat.x * quat.y;\n\tfloat xz = 2.0 * quat.x * quat.z;\n\tfloat xw = 2.0 * quat.x * quat.w;\n\tfloat yz = 2.0 * quat.y * quat.z;\n\tfloat yw = 2.0 * quat.y * quat.w;\n\tfloat zw = 2.0 * quat.z * quat.w;\n\tfloat xx = 2.0*quat.x * quat.x;\n\tfloat yy = 2.0*quat.y * quat.y;\n\tfloat zz = 2.0*quat.z * quat.z;\n\tfloat ww = 2.0*quat.w * quat.w;\n\tfloat s = translation.w;\n\tmat4 matrix = mat4(\n\t(1.0-yy-zz)*s, (xy+zw)*s, (xz-yw)*s, 0,\n\t(xy-zw)*s, (1.0-xx-zz)*s, (yz + xw)*s, 0,\n\t(xz + yw)*s, (yz - xw)*s, (1.0-xx-yy)*s, 0,\n\ttranslation.x, translation.y, translation.z, 1);\n\treturn matrix;\n}\n\nhighp vec4 calcVertex(highp vec4 srcVertex,lowp vec4 blendIndex,lowp vec4 blendWeight)\n{\n\tint i = int(blendIndex.x);\n    int i2 =int(blendIndex.y);\n\tint i3 =int(blendIndex.z);\n\tint i4 =int(blendIndex.w);\n\n    mat4 mat = buildMat4(i)*blendWeight.x\n\t\t\t + buildMat4(i2)*blendWeight.y\n\t\t\t + buildMat4(i3)*blendWeight.z\n\t\t\t + buildMat4(i4)*blendWeight.w;\n\treturn mat* srcVertex;\n}\n#endif\nvoid main()\n{\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\n    xlv_TEXCOORD0 = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n\n    //----------------------------------------------------------\n    #ifdef SKIN\n    position =calcVertex(position,_glesBlendIndex4,_glesBlendWeight4);\n    #endif\n    position = (glstate_matrix_mvp * position);\n\n    #ifdef FOG\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\n    factor = clamp(factor, 0.0, 1.0);\n    #endif\n\n    gl_Position = position;\n}"}