{"asi.fs.glsl":"uniform lowp sampler2D _MainTex;  \r\nuniform lowp sampler2D _asm;\r\nuniform lowp sampler2D _streamlight;\r\nuniform lowp float _LightRate;\r\nuniform lowp vec4 _LightColor;\r\nuniform lowp float _emitpow;\r\nuniform lowp float _diffuse;\r\n//uniform highp float _Cutoff;\r\n\r\n\r\nvarying mediump vec2 _base_uv;\r\nvarying mediump vec2 _asm_uv;\r\nvarying mediump vec2 _light_uv;\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color; \r\nvarying lowp float factor;\r\n#endif\r\n\r\n//texture2DEtC1Mark\r\n\r\nvoid main() \r\n{\r\n    \r\n    lowp vec4 baseTex=texture2D(_MainTex,_base_uv);\r\n    if(baseTex.a<0.5)\r\n    {\r\n        discard;\r\n    }\r\n    lowp vec3 asi=texture2D(_asm,_asm_uv).rgb;\r\n    lowp vec3 d_color=baseTex.rgb*_diffuse;\r\n    lowp vec3 e_color=baseTex.rgb*_emitpow*asi.g;\r\n    lowp vec3 light = texture2D(_streamlight, _light_uv).rgb* _LightRate*_LightColor.xyz;\r\n    light = min(light,asi.b);\r\n    light = light*_LightRate*_LightColor.xyz;\r\n    lowp vec4 emission=vec4(d_color+e_color+light,1.0);\r\n\r\n    #ifdef FOG\r\n    emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\r\n    #endif\r\n\r\n    gl_FragData[0] = emission;\r\n}\r\n\r\n","asi.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n\t\"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"asi\",\r\n                \"fs\": \"asi\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"asi\",\r\n                \"fs\": \"asi\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"asi\",\r\n                \"fs\": \"asi\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"asi\",\r\n                \"fs\": \"asi\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","asi.vs.glsl":"attribute highp vec3 _glesVertex;\r\nattribute mediump vec2 _glesMultiTexCoord0;\r\n\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform mediump vec4 _MainTex_ST;\r\nuniform mediump vec4 _asm_ST;\r\nuniform mediump vec4 _streamlight_ST;\r\nuniform lowp float _speedu;\r\nuniform lowp float _speedv;\r\nuniform lowp float glstate_timer;\r\n\r\nvarying mediump vec2 _base_uv;\r\nvarying mediump vec2 _asm_uv;\r\nvarying mediump vec2 _light_uv;\r\n\r\n#ifdef FOG\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nvarying lowp float factor;\r\n#endif\r\n\r\n#ifdef SKIN\r\nattribute lowp vec4 _glesBlendIndex4;\r\nattribute lowp vec4 _glesBlendWeight4;\r\nuniform highp vec4 glstate_vec4_bones[110];\r\nmat4 buildMat4(int index)\r\n{\r\n\tvec4 quat = glstate_vec4_bones[index * 2 + 0];\r\n\tvec4 translation = glstate_vec4_bones[index * 2 + 1];\r\n\tfloat xy = 2.0 * quat.x * quat.y;\r\n\tfloat xz = 2.0 * quat.x * quat.z;\r\n\tfloat xw = 2.0 * quat.x * quat.w;\r\n\tfloat yz = 2.0 * quat.y * quat.z;\r\n\tfloat yw = 2.0 * quat.y * quat.w;\r\n\tfloat zw = 2.0 * quat.z * quat.w;\r\n\tfloat xx = 2.0*quat.x * quat.x;\r\n\tfloat yy = 2.0*quat.y * quat.y;\r\n\tfloat zz = 2.0*quat.z * quat.z;\r\n\tfloat ww = 2.0*quat.w * quat.w;\r\n\tfloat s = translation.w;\r\n\tmat4 matrix = mat4(\r\n\t(1.0-yy-zz)*s, (xy+zw)*s, (xz-yw)*s, 0,\r\n\t(xy-zw)*s, (1.0-xx-zz)*s, (yz + xw)*s, 0,\r\n\t(xz + yw)*s, (yz - xw)*s, (1.0-xx-yy)*s, 0,\r\n\ttranslation.x, translation.y, translation.z, 1);\r\n\treturn matrix;\r\n}\r\n\r\nhighp vec4 calcVertex(highp vec4 srcVertex,lowp vec4 blendIndex,lowp vec4 blendWeight)\r\n{\r\n\tint i = int(blendIndex.x);\r\n    int i2 =int(blendIndex.y);\r\n\tint i3 =int(blendIndex.z);\r\n\tint i4 =int(blendIndex.w);\r\n\r\n    mat4 mat = buildMat4(i)*blendWeight.x\r\n\t\t\t + buildMat4(i2)*blendWeight.y\r\n\t\t\t + buildMat4(i3)*blendWeight.z\r\n\t\t\t + buildMat4(i4)*blendWeight.w;\r\n\treturn mat* srcVertex;\r\n}\r\n#endif\r\nvoid main()\r\n{\r\n\thighp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n\r\n\t_base_uv = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\r\n\t_asm_uv = _glesMultiTexCoord0.xy * _asm_ST.xy + _asm_ST.zw;\r\n\tlowp vec2 _speed;\r\n    _speed = vec2(_speedu,_speedv);\r\n    _light_uv = (_glesMultiTexCoord0.xy * _streamlight_ST.xy + _streamlight_ST.zw)  + _speed * glstate_timer;\r\n\r\n    #ifdef SKIN\r\n    position =calcVertex(position,_glesBlendIndex4,_glesBlendWeight4);\r\n    #endif\r\n    position = (glstate_matrix_mvp * position);\r\n\r\n    #ifdef FOG\r\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\r\n    factor = clamp(factor, 0.0, 1.0);\r\n    #endif\r\n\r\n\tgl_Position = position;\r\n}\r\n\r\n","blendnotest.vs.glsl":"attribute highp vec4 _glesVertex;\r\nattribute mediump vec4 _glesMultiTexCoord0;   \r\n\r\nuniform lowp vec4 _Main_Color;\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform mediump vec4 _Main_Tex_ST;\r\n\r\n\r\nvarying lowp vec4 xlv_COLOR;\r\nvarying mediump vec2 xlv_TEXCOORD0;                \r\nvoid main()                                     \r\n{                                               \r\n    highp vec4 tmpvar_1=vec4(_glesVertex.xyz,1.0);\r\n    xlv_COLOR = vec4(1.0,1.0,1.0,1.0);\r\n\txlv_TEXCOORD0 =_glesMultiTexCoord0.xy * _Main_Tex_ST.xy + _Main_Tex_ST.zw;\r\n                \r\n    gl_Position = (glstate_matrix_mvp *tmpvar_1);  \r\n}","blend_notest.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\":  0,\r\n  \"properties\": [\r\n\t\t    \"_Main_Tex('MainTex',Texture)='white'{}\",\r\n        \"_Main_Color ('Tint Color', Color) = (1.0,1.0,1.0,1.0)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n          {\r\n            \"blendmode\": \"blend\",\r\n            \"showface\": \"ccw\",\r\n            \"zwrite\": \"off\",\r\n            \"ztest\":\"off\",\r\n            \"vs\": \"blendnotest\",\r\n            \"fs\": \"f14trans\"\r\n          }\r\n        ],\r\n        \"shadowgen\": [],  \r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","bloom.fs.glsl":"#ifdef GL_FRAGMENT_PRECISION_HIGH\r\nprecision highp float;\r\n#else\r\nprecision mediump float;\r\n#endif\r\n\r\nuniform sampler2D       _MainTex;//清晰图\r\nuniform sampler2D       _BlurTex;//模糊高光的图\r\nuniform highp vec4      _MainTex_TexelSize;\r\n\r\nuniform highp float     _bloomIntensity;\r\n// 强度 - 附加光（影响到该特效的光源）的全局光强\r\nuniform highp vec4     _blurSpread;\r\n// 模糊扩散 - Frag down sample 的偏移距离\r\nuniform highp float     _bloomThreshold;\r\n// 阈值 - 图像中亮度高于该阈值的区域将产生泛光效果\r\n\r\nvarying highp vec2      xlv_TEXCOORD0;   // 每个片元的纹素坐标\r\n\r\n#define INTENSITY       _bloomIntensity\r\n#define THRESHOLD       _bloomThreshold\r\n#define BLUR_SPREAD     vec2(_blurSpread.xy * _MainTex_TexelSize.xy)\r\n\r\n#define tex(t, uv)      texture2D((t), (uv))\r\n\r\n//texture2DEtC1Mark\r\n\r\nfloat luminance(vec3 rgb) {\r\n    const vec3 w = vec3(0.2125, 0.7154, 0.0721);\r\n    return dot(rgb, w);\r\n}\r\n// Blur spread 扩撒\r\nvec4 fragDownsample(sampler2D image, vec2 uv) {\r\n    vec2 uv2[4];\r\n    uv2[0] = uv + _MainTex_TexelSize.xy * vec2(1.5, 1.5);\r\n    uv2[1] = uv + _MainTex_TexelSize.xy * vec2(-1.5, 1.5);\r\n    uv2[2] = uv + _MainTex_TexelSize.xy * vec2(-1.5, -1.5);\r\n    uv2[3] = uv + _MainTex_TexelSize.xy * vec2(1.5, -1.5);\r\n    vec4 color;\r\n    color += texture2D(image, uv2[0]);\r\n    color += texture2D(image, uv2[1]);\r\n    color += texture2D(image, uv2[2]);\r\n    color += texture2D(image, uv2[3]);\r\n    return max(color/4.0 - THRESHOLD, vec4(0.0)) * INTENSITY;\r\n}\r\nvec4 fastBlur(sampler2D image, vec2 uv, vec2 netFilterWidth) {\r\n\r\n    vec4 blur = vec4(0.0);\r\n    vec2 _offset[7];\r\n    vec4 curve[7];\r\n    curve[0] = vec4(0.0205, 0.0205, 0.0205, 0.0);\r\n    curve[1] = vec4(0.0855, 0.0855, 0.0855, 0.0);\r\n    curve[2] = vec4(0.232, 0.232, 0.232, 0.0);\r\n    curve[3] = vec4(0.324, 0.324, 0.324, 1.0);\r\n    curve[4] = vec4(0.232, 0.232, 0.232, 0.0);\r\n    curve[5] = vec4(0.0855, 0.0855, 0.0855, 0.0);\r\n    curve[6] = vec4(0.0205, 0.0205, 0.0205, 0.0);\r\n    // horizontal or vertical blur, defined by netFilterWidth vector\r\n    _offset[0] = uv + netFilterWidth * 3.0;\r\n    _offset[1] = uv + netFilterWidth * 2.0;\r\n    _offset[2] = uv + netFilterWidth;\r\n    _offset[3] = uv;\r\n    _offset[4] = uv - netFilterWidth;\r\n    _offset[5] = uv - netFilterWidth * 2.0;\r\n    _offset[6] = uv - netFilterWidth * 3.0;\r\n    for(int l = 0; l < 7; l++) {\r\n        blur += tex(image, _offset[l]) * curve[l];\r\n    }\r\n\r\n    return blur;\r\n}\r\n\r\nvoid main () {\r\n    if(BLUR_SPREAD.x == 0.0 && BLUR_SPREAD.y == 0.0) {    // 不泛光, 只过滤\r\n        gl_FragColor = fragDownsample(_MainTex, xlv_TEXCOORD0);\r\n    } else if(THRESHOLD == 1.0){    // 不过滤, 只泛光\r\n        gl_FragColor = fastBlur(_MainTex, xlv_TEXCOORD0, BLUR_SPREAD);\r\n    } else {    // Final Composition\r\n        vec4 originColor = texture2D(_MainTex, xlv_TEXCOORD0);\r\n        originColor = vec4(originColor.rgb * INTENSITY, originColor.a);\r\n        vec4 bloomColor = texture2D(_BlurTex, xlv_TEXCOORD0);\r\n        gl_FragColor = originColor + bloomColor;\r\n    }\r\n\r\n    // vec4 c = texture2D(_MainTex, xlv_TEXCOORD0);\r\n    // vec4 cur_color;\r\n    // cur_color = fastBlur(_MainTex, xlv_TEXCOORD0,BLUR_SPREAD);\r\n    //\r\n    // c = vec4(c.rgb * INTENSITY, c.a) / 2.0;\r\n    // gl_FragColor = c;\r\n}\r\n","bloom.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_bloomFactor('bloomFactor',Range(0.0,1.0)) = 2.0\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"quad\",\r\n                \"fs\": \"bloom\"\r\n            }\r\n        ],\r\n        \"quad\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"quad\",\r\n                \"fs\": \"bloom\"\r\n            }\r\n        ]\r\n    }\r\n}","diffuse.fs.glsl":"precision lowp float;\r\nuniform lowp sampler2D _MainTex;\r\nuniform lowp vec4 _MainColor;\r\nuniform lowp float _AlphaCut;\r\nvarying mediump vec2 xlv_TEXCOORD0;\r\n\r\n//light\r\nlowp vec4 xlv_COLOR = vec4(0.0,0.0,0.0,1.0); \r\nbool hasLight = false;\r\nlowp vec3 fixedAmbient = vec3(0.6,0.6,0.6);\r\nuniform lowp float glstate_lightcount;\r\nuniform lowp vec4 glstate_vec4_lightposs[8];\r\nuniform lowp vec4 glstate_vec4_lightdirs[8];\r\nuniform lowp float glstate_float_spotangelcoss[8];\r\nuniform lowp vec4 glstate_vec4_lightcolors[8];\r\nuniform lowp float glstate_float_lightrange[8];\r\nuniform lowp float glstate_float_lightintensity[8];\r\n\r\nvarying lowp vec3 v_N;\r\nvarying lowp vec3 v_Mpos;\r\n\r\n//texture2DEtC1Mark\r\n\r\n\r\n#ifdef LIGHTMAP\r\nuniform lowp sampler2D _LightmapTex;\r\nvarying mediump vec2 lightmap_TEXCOORD;\r\nlowp vec3 decode_hdr(lowp vec4 data)\r\n{\r\n    lowp float power =pow( 2.0 ,data.a * 255.0 - 128.0);\r\n    return data.rgb * power * 2.0 ;\r\n}\r\n#endif\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color; \r\nvarying lowp float factor;\r\n#endif\r\n\r\n//calcDiffuse 计算漫反射强度函数\r\n//统一三种光源的传参方式，在函数内混合，方便就不高效\r\n//只需要方向光时另写\r\n//N 世界空间法线\r\n//worldpos 世界空间pos\r\n//lightPos 光源位置,w=0 表示方向光\r\n//lightDir 光源方向，W=0 表示点光源，和楼上的w一起为1 表示 探照灯 spot\r\n//cosspot cos(a) a为spot的半径 a取值0到90度，算好cos再传进来\r\nlowp float calcDiffuse(lowp vec3 N,lowp vec3 worldpos,lowp vec4 lightPos,lowp vec4 lightDir,lowp float cosspot,lowp float range )\r\n{\r\n    lowp vec3 v3 = lightPos.xyz - worldpos;\r\n    lowp float len = length(v3);\r\n    len = len > range ? range : len;\r\n    //求入射角，点光源&聚光灯\r\n    lowp vec3 L = normalize(v3); \r\n    //求张角 聚光灯 也是方向光入射角\r\n    lowp vec3 L2 = -lightDir.xyz;\r\n    lowp float dotSpot = dot(L,L2);\r\n    //漫反射强度\r\n    lowp float diffuse =clamp(dot(N.xyz,L.xyz),0.0,1.0) * pow(1.0 - len/range,2.0); \r\n    lowp float diffuseD =clamp(dot(N.xyz,L2.xyz),0.0,1.0); \r\n    //pos.w 和 dir.w 至少有一个1，刚好组合出三种光源\r\n    diffuse= mix(diffuse,diffuse*smoothstep(cosspot,1.0,dotSpot),lightDir.w);\r\n    diffuse= mix(diffuseD,diffuse,lightPos.w);\r\n    return diffuse;\r\n}\r\n\r\nvoid calcCOLOR(){\r\n    int c =int(glstate_lightcount);\r\n\tif(c>0){\r\n        hasLight = true;\r\n        lowp float diff=0.0;\r\n\t\t//calcDiffuse(N,worldpos,glstate_vec4_lightposs[0],glstate_vec4_lightdirs[0],0.8);\r\n\t\tfor(int i=0;i<8;i++)\r\n\t\t{\r\n\t\t\tif(i>=c)break;\r\n\t\t\t//diff += calcDiffuse(v_N,v_Mpos,glstate_vec4_lightposs[i],glstate_vec4_lightdirs[i],glstate_float_spotangelcoss[i],glstate_float_lightrange[i]);\r\n\t\t\tdiff = calcDiffuse(v_N,v_Mpos,glstate_vec4_lightposs[i],glstate_vec4_lightdirs[i],glstate_float_spotangelcoss[i],glstate_float_lightrange[i]);\r\n            xlv_COLOR += glstate_float_lightintensity[i] * glstate_vec4_lightcolors[i] * diff;\r\n\t\t}\r\n\t\txlv_COLOR.w = 1.0;  \r\n    }\r\n}\r\n\r\nvoid main() \r\n{\r\n    lowp vec4 basecolor = texture2D(_MainTex, xlv_TEXCOORD0);\r\n    if(basecolor.a < _AlphaCut)\r\n        discard;\r\n    lowp vec4 fristColor=basecolor*_MainColor;\r\n    lowp vec4 emission = fristColor;\r\n\r\n    //----------------------------------------------------------\r\n    //light\r\n    calcCOLOR();\r\n    \r\n    #ifdef LIGHTMAP\r\n    lowp vec4 lightmap = texture2D(_LightmapTex, lightmap_TEXCOORD);\r\n    emission.xyz *= decode_hdr(lightmap);\r\n    if(hasLight){ // have light\r\n        fristColor = fristColor * xlv_COLOR ;\r\n        emission = emission + mix(vec4(1.0, 1.0, 1.0, 1.0), fristColor, fristColor.wwww);\r\n    }\r\n    #else\r\n\tif(hasLight){ // have light\r\n        emission = (fristColor * xlv_COLOR) + (fristColor * vec4(fixedAmbient,1.0));\r\n    }\r\n    #endif\r\n\r\n    #ifdef FOG\r\n    emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\r\n    #endif\r\n    \r\n    gl_FragData[0] = emission;\r\n}","diffuse.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_AlphaCut('AlphaCut',Range(0.0,1.0)) = 0.5\",\r\n        \"_MainTex_ST('MainTex_ST',Vector) = (1,1,0,0)\",\r\n        \"_MainColor ('MainColor', Color) = (1,1,1,1)\"\r\n    ],\r\n    \"passes\": {\r\n\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"lightmap\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"lightmap_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"base_depth\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"post_depth\",\r\n                \"fs\": \"post_depth\"\r\n            }\r\n        ]\r\n    }\r\n}","diffuse.vs.glsl":"attribute highp vec4 _glesVertex;\r\nattribute mediump vec4 _glesMultiTexCoord0;\r\n\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform mediump vec4 _MainTex_ST;\r\nvarying mediump vec2 xlv_TEXCOORD0;\r\n//light\r\nlowp mat4 blendMat ;\r\nattribute lowp vec3 _glesNormal;\r\nuniform highp mat4 glstate_matrix_model;\r\nuniform lowp float glstate_lightcount;\r\n\r\nvarying highp vec3 v_N;\r\nvarying highp vec3 v_Mpos;\r\n\r\n\r\n#ifdef LIGHTMAP\r\nattribute mediump vec4 _glesMultiTexCoord1;\r\nuniform mediump vec4 glstate_lightmapOffset;\r\n// uniform mediump float glstate_lightmapUV;\r\nvarying mediump vec2 lightmap_TEXCOORD;\r\n#endif\r\n\r\n#ifdef FOG\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nvarying lowp float factor;\r\n#endif\r\n\r\n#ifdef SKIN\r\nattribute lowp vec4 _glesBlendIndex4;\r\nattribute lowp vec4 _glesBlendWeight4;\r\nuniform highp vec4 glstate_vec4_bones[110];\r\nmat4 buildMat4(int index)\r\n{\r\n\tvec4 quat = glstate_vec4_bones[index * 2 + 0];\r\n\tvec4 translation = glstate_vec4_bones[index * 2 + 1];\r\n\tfloat xy = 2.0 * quat.x * quat.y;\r\n\tfloat xz = 2.0 * quat.x * quat.z;\r\n\tfloat xw = 2.0 * quat.x * quat.w;\r\n\tfloat yz = 2.0 * quat.y * quat.z;\r\n\tfloat yw = 2.0 * quat.y * quat.w;\r\n\tfloat zw = 2.0 * quat.z * quat.w;\r\n\tfloat xx = 2.0*quat.x * quat.x;\r\n\tfloat yy = 2.0*quat.y * quat.y;\r\n\tfloat zz = 2.0*quat.z * quat.z;\r\n\tfloat ww = 2.0*quat.w * quat.w;\r\n\tfloat s = translation.w;\r\n\tmat4 matrix = mat4(\r\n\t(1.0-yy-zz)*s, (xy+zw)*s, (xz-yw)*s, 0,\r\n\t(xy-zw)*s, (1.0-xx-zz)*s, (yz + xw)*s, 0,\r\n\t(xz + yw)*s, (yz - xw)*s, (1.0-xx-yy)*s, 0,\r\n\ttranslation.x, translation.y, translation.z, 1);\r\n\treturn matrix;\r\n}\r\n\r\nhighp vec4 calcVertex(highp vec4 srcVertex,lowp vec4 blendIndex,lowp vec4 blendWeight)\r\n{\r\n\tint i = int(blendIndex.x);\r\n    int i2 =int(blendIndex.y);\r\n\tint i3 =int(blendIndex.z);\r\n\tint i4 =int(blendIndex.w);\r\n\r\n    blendMat = buildMat4(i)*blendWeight.x\r\n\t\t\t + buildMat4(i2)*blendWeight.y\r\n\t\t\t + buildMat4(i3)*blendWeight.z\r\n\t\t\t + buildMat4(i4)*blendWeight.w;\r\n\treturn blendMat * srcVertex;\r\n}\r\n\r\n#endif\r\n\r\nvoid calcNormal(highp vec4 pos){\r\n\tint c =int(glstate_lightcount);\r\n\tif(c>0){\r\n\t\t//求世界空间法线\r\n\t\t#ifdef SKIN\r\n\t\tv_N = normalize(mat3(blendMat) * _glesNormal);\r\n\t\t#else\r\n\t\tv_N = _glesNormal;\r\n\t\t#endif\r\n\t\tlowp mat3 normalmat = mat3(glstate_matrix_model);\r\n\t\tv_N =normalize(normalmat*v_N);\r\n\t\tv_Mpos =(glstate_matrix_model * pos).xyz;\r\n\t}\r\n}\r\n\r\nvoid main()\r\n{\r\n    xlv_TEXCOORD0 = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\r\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n\r\n    //----------------------------------------------------------\r\n    #ifdef LIGHTMAP\r\n    mediump vec2 beforelightUV = _glesMultiTexCoord1.xy;\r\n    lowp float u = beforelightUV.x * glstate_lightmapOffset.x + glstate_lightmapOffset.z;\r\n    lowp float v = beforelightUV.y * glstate_lightmapOffset.y + glstate_lightmapOffset.w;\r\n    lightmap_TEXCOORD = vec2(u,v);\r\n    #endif\r\n\r\n    #ifdef SKIN\r\n    position =calcVertex(position,_glesBlendIndex4,_glesBlendWeight4);\r\n    #endif\r\n\t//light\r\n    calcNormal(position);\r\n    position = (glstate_matrix_mvp * position);\r\n\r\n    #ifdef FOG\r\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\r\n    factor = clamp(factor, 0.0, 1.0);\r\n    #endif\r\n\r\n\r\n    gl_Position =position;\r\n}","diffuse_bothside.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_AlphaCut('AlphaCut',Range(0.0,1.0)) = 0.5\",\r\n        \"_MainTex_ST('MainTex_ST',Vector) = (1,1,0,0)\",\r\n        \"_MainColor ('MainColor', Color) = (1,1,1,1)\"\r\n    ],\r\n    \"passes\": {\r\n\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"lightmap\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"lightmap_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ]\r\n    }\r\n}","diffuse_nolight.fs.glsl":"precision lowp float;\r\nuniform lowp sampler2D _MainTex;\r\nuniform lowp vec4 _MainColor;\r\nuniform lowp float _AlphaCut;\r\nvarying mediump vec2 xlv_TEXCOORD0;\r\n\r\n//texture2DEtC1Mark\r\n\r\n#ifdef LIGHTMAP\r\nuniform lowp sampler2D _LightmapTex;\r\nvarying mediump vec2 lightmap_TEXCOORD;\r\nlowp vec3 decode_hdr(lowp vec4 data)\r\n{\r\n    lowp float power =pow( 2.0 ,data.a * 255.0 - 128.0);\r\n    return data.rgb * power * 2.0 ;\r\n}\r\n#endif\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color; \r\nvarying lowp float factor;\r\n#endif\r\n\r\nvoid main() \r\n{\r\n    lowp vec4 basecolor = texture2D(_MainTex, xlv_TEXCOORD0);\r\n    if(basecolor.a < _AlphaCut)\r\n        discard;\r\n    lowp vec4 fristColor=basecolor*_MainColor;\r\n    lowp vec4 emission = fristColor;\r\n\r\n    //----------------------------------------------------------\r\n    \r\n    #ifdef LIGHTMAP\r\n    lowp vec4 lightmap = texture2D(_LightmapTex, lightmap_TEXCOORD);\r\n    emission.xyz *= decode_hdr(lightmap);\r\n    #endif\r\n\r\n    #ifdef FOG\r\n    emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\r\n    #endif\r\n    \r\n    gl_FragData[0] = emission;\r\n}","diffuse_nolight.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_AlphaCut('AlphaCut',Range(0.0,1.0)) = 0.5\",\r\n        \"_MainTex_ST('MainTex_ST',Vector) = (1,1,0,0)\",\r\n        \"_MainColor ('MainColor', Color) = (1,1,1,1)\"\r\n    ],\r\n    \"passes\": {\r\n\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse_nolight\",\r\n                \"fs\": \"diffuse_nolight\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse_nolight\",\r\n                \"fs\": \"diffuse_nolight\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse_nolight\",\r\n                \"fs\": \"diffuse_nolight\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse_nolight\",\r\n                \"fs\": \"diffuse_nolight\"\r\n            }\r\n        ],\r\n        \"lightmap\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse_nolight\",\r\n                \"fs\": \"diffuse_nolight\"\r\n            }\r\n        ],\r\n        \"lightmap_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse_nolight\",\r\n                \"fs\": \"diffuse_nolight\"\r\n            }\r\n        ],\r\n        \"base_depth\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"post_depth\",\r\n                \"fs\": \"post_depth\"\r\n            }\r\n        ]\r\n    }\r\n}","diffuse_nolight.vs.glsl":"attribute highp vec4 _glesVertex;\r\nattribute mediump vec4 _glesMultiTexCoord0;\r\n\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform mediump vec4 _MainTex_ST;\r\nvarying mediump vec2 xlv_TEXCOORD0;\r\n\r\n#ifdef LIGHTMAP\r\nattribute mediump vec4 _glesMultiTexCoord1;\r\nuniform mediump vec4 glstate_lightmapOffset;\r\n// uniform mediump float glstate_lightmapUV;\r\nvarying mediump vec2 lightmap_TEXCOORD;\r\n#endif\r\n\r\n#ifdef FOG\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nvarying lowp float factor;\r\n#endif\r\n\r\n#ifdef SKIN\r\nattribute lowp vec4 _glesBlendIndex4;\r\nattribute lowp vec4 _glesBlendWeight4;\r\nuniform highp vec4 glstate_vec4_bones[110];\r\nmat4 buildMat4(int index)\r\n{\r\n\tvec4 quat = glstate_vec4_bones[index * 2 + 0];\r\n\tvec4 translation = glstate_vec4_bones[index * 2 + 1];\r\n\tfloat xy = 2.0 * quat.x * quat.y;\r\n\tfloat xz = 2.0 * quat.x * quat.z;\r\n\tfloat xw = 2.0 * quat.x * quat.w;\r\n\tfloat yz = 2.0 * quat.y * quat.z;\r\n\tfloat yw = 2.0 * quat.y * quat.w;\r\n\tfloat zw = 2.0 * quat.z * quat.w;\r\n\tfloat xx = 2.0*quat.x * quat.x;\r\n\tfloat yy = 2.0*quat.y * quat.y;\r\n\tfloat zz = 2.0*quat.z * quat.z;\r\n\tfloat ww = 2.0*quat.w * quat.w;\r\n\tfloat s = translation.w;\r\n\tmat4 matrix = mat4(\r\n\t(1.0-yy-zz)*s, (xy+zw)*s, (xz-yw)*s, 0,\r\n\t(xy-zw)*s, (1.0-xx-zz)*s, (yz + xw)*s, 0,\r\n\t(xz + yw)*s, (yz - xw)*s, (1.0-xx-yy)*s, 0,\r\n\ttranslation.x, translation.y, translation.z, 1);\r\n\treturn matrix;\r\n}\r\n\r\nhighp vec4 calcVertex(highp vec4 srcVertex,lowp vec4 blendIndex,lowp vec4 blendWeight)\r\n{\r\n\tint i = int(blendIndex.x);\r\n    int i2 =int(blendIndex.y);\r\n\tint i3 =int(blendIndex.z);\r\n\tint i4 =int(blendIndex.w);\r\n\r\n\tlowp mat4 blendMat = buildMat4(i)*blendWeight.x\r\n\t\t\t + buildMat4(i2)*blendWeight.y\r\n\t\t\t + buildMat4(i3)*blendWeight.z\r\n\t\t\t + buildMat4(i4)*blendWeight.w;\r\n\treturn blendMat * srcVertex;\r\n}\r\n\r\n#endif\r\n\r\n\r\nvoid main()\r\n{\r\n    xlv_TEXCOORD0 = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\r\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n\r\n    //----------------------------------------------------------\r\n    #ifdef LIGHTMAP\r\n    mediump vec2 beforelightUV = _glesMultiTexCoord1.xy;\r\n    lowp float u = beforelightUV.x * glstate_lightmapOffset.x + glstate_lightmapOffset.z;\r\n    lowp float v = beforelightUV.y * glstate_lightmapOffset.y + glstate_lightmapOffset.w;\r\n    lightmap_TEXCOORD = vec2(u,v);\r\n    #endif\r\n\r\n    #ifdef SKIN\r\n    position =calcVertex(position,_glesBlendIndex4,_glesBlendWeight4);\r\n    #endif\r\n\r\n    position = (glstate_matrix_mvp * position);\r\n\r\n    #ifdef FOG\r\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\r\n    factor = clamp(factor, 0.0, 1.0);\r\n    #endif\r\n\r\n\r\n    gl_Position =position;\r\n}","f14trans.fs.glsl":"uniform mediump sampler2D _Main_Tex;\r\n\r\nvarying lowp vec4 xlv_COLOR;\r\nvarying mediump vec2 xlv_TEXCOORD0;       \r\n//texture2DEtC1Mark\r\n   \r\nvoid main() \r\n{\r\n    lowp vec4 basecolor = texture2D(_Main_Tex, xlv_TEXCOORD0);\r\n    gl_FragData[0] =basecolor*xlv_COLOR;\r\n    //gl_FragData[0] =vec4(1,0,0,1);\r\n}","f14trans.vs.glsl":"attribute highp vec4 _glesVertex;\r\nattribute mediump vec4 _glesMultiTexCoord0;   \r\nattribute lowp vec4 _glesColor;\r\n\r\nuniform lowp vec4 _Main_Color;\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform mediump vec4 _Main_Tex_ST;\r\n\r\n\r\nvarying lowp vec4 xlv_COLOR;\r\nvarying mediump vec2 xlv_TEXCOORD0;                \r\nvoid main()                                     \r\n{                                               \r\n    highp vec4 tmpvar_1=vec4(_glesVertex.xyz,1.0);\r\n    xlv_COLOR = _Main_Color*_glesColor;\r\n\txlv_TEXCOORD0 =_glesMultiTexCoord0.xy * _Main_Tex_ST.xy + _Main_Tex_ST.zw;\r\n                \r\n    gl_Position = (glstate_matrix_mvp *tmpvar_1);  \r\n}","f4skin.fs.glsl":"precision lowp float;\r\nuniform lowp sampler2D _MainTex;\r\nuniform lowp vec4 _MainColor;\r\nuniform lowp float _AlphaCut;\r\n// varying mediump vec2 xlv_TEXCOORD0;\r\n\r\n// #ifdef LIGHTMAP\r\n// uniform lowp sampler2D _LightmapTex;\r\n// varying mediump vec2 lightmap_TEXCOORD;\r\n// lowp vec3 decode_hdr(lowp vec4 data)\r\n// {\r\n//     lowp float power =pow( 2.0 ,data.a * 255.0 - 128.0);\r\n//     return data.rgb * power * 2.0 ;\r\n// }\r\n// #endif\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color;\r\nvarying lowp float factor;\r\n#endif\r\n\r\nvarying highp vec4 vcolor;\r\n\r\n//texture2DEtC1Mark\r\n\r\nvoid main()\r\n{\r\n    // lowp vec4 basecolor = vec4(1);\r\n    // // lowp vec4 basecolor = texture2D(_MainTex, xlv_TEXCOORD0);\r\n    // // if(basecolor.a < _AlphaCut)\r\n    // //     discard;\r\n    // lowp vec4 fristColor=basecolor*_MainColor;\r\n    // lowp vec4 emission = fristColor;\r\n\r\n    // //----------------------------------------------------------\r\n\r\n    // // #ifdef LIGHTMAP\r\n    // // lowp vec4 lightmap = texture2D(_LightmapTex, lightmap_TEXCOORD);\r\n    // // emission.xyz *= decode_hdr(lightmap);\r\n    // // #endif\r\n\r\n    // #ifdef FOG\r\n    // emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\r\n    // #endif\r\n\r\n    gl_FragData[0] = vec4(pow(vcolor.rgb, vec3(1./2.2)), vcolor.a);\r\n    // gl_FragData[0] = vec4(1, 0, 0, 1);\r\n}","f4skin.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"boneSampler('MainTex',Texture)='white'{}\",\r\n        \"boneSamplerTexelSize('boneSamplerTexelSize',float)=0.1\",\r\n        \"_AlphaCut('AlphaCut',Range(0.0,1.0)) = 0.5\",\r\n        \"_MainTex_ST('MainTex_ST',Vector) = (1,1,0,0)\",\r\n        \"_MainColor ('MainColor', Color) = (1,1,1,1)\"\r\n    ],\r\n    \"passes\": {\r\n\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"f4skin\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"f4skin\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"f4skin\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"f4skin\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"lightmap\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"f4skin\",\r\n                \"fs\": \"f4skin\"\r\n            }\r\n        ],\r\n        \"lightmap_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"f4skin\",\r\n                \"fs\": \"f4skin\"\r\n            }\r\n        ],\r\n        \"base_depth\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"post_depth\",\r\n                \"fs\": \"post_depth\"\r\n            }\r\n        ]\r\n    }\r\n}","f4skin.vs.glsl":"precision highp float;\r\n\r\nattribute highp vec4 _glesVertex;\r\nattribute mediump vec4 _glesMultiTexCoord0;\r\nattribute highp vec4 _glesColor;\r\n\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform mediump vec4 _MainTex_ST;\r\n// varying mediump vec2 xlv_TEXCOORD0;\r\n\r\n// #ifdef LIGHTMAP\r\n// attribute mediump vec4 _glesMultiTexCoord1;\r\n// uniform mediump vec4 glstate_lightmapOffset;\r\n// // uniform mediump float glstate_lightmapUV;\r\n// varying mediump vec2 lightmap_TEXCOORD;\r\n// #endif\r\n\r\n\r\n// NOTE: diffuse cap\r\nvarying lowp vec3 v_N;\r\nvarying lowp vec3 v_Mpos;\r\nvarying mediump vec2 xlv_TEXCOORD0;\r\nvarying mediump vec2 lightmap_TEXCOORD;\r\n\r\n\r\n//texture2DEtC1Mark\r\n\r\n\r\n#ifdef FOG\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nvarying lowp float factor;\r\n#endif\r\n\r\n#define SKIN2\r\n\r\n#define SKIN\r\n#ifdef SKIN\r\nattribute lowp vec4 _glesBlendIndex4;\r\nattribute lowp vec4 _glesBlendWeight4;\r\nuniform highp vec4 glstate_vec4_bones[110];\r\n\r\n#ifdef SKIN2\r\n// uniform highp mat4 glstate_matrix_bones[24];\r\nuniform highp sampler2D boneSampler;\r\nuniform highp float boneSamplerTexelSize;\r\nuniform highp vec4 boneSampler_TexelSize;\r\n\r\nmat4 readMatrixSampler(sampler2D smp, float index) {\r\n    float offset = index * 4.;\r\n    return mat4(\r\n\t\ttexture2D(smp, vec2(boneSamplerTexelSize * (offset + 0.5), 0)),\r\n\t\ttexture2D(smp, vec2(boneSamplerTexelSize * (offset + 1.5), 0)),\r\n\t\ttexture2D(smp, vec2(boneSamplerTexelSize * (offset + 2.5), 0)),\r\n\t\ttexture2D(smp, vec2(boneSamplerTexelSize * (offset + 3.5), 0))\r\n\t\t);\r\n}\r\nhighp vec4 calcVertexF4(highp vec4 srcVertex) {\r\n\tmat4 mat = _glesBlendWeight4[0] * readMatrixSampler(boneSampler, _glesBlendIndex4[0])\r\n\t\t\t+ _glesBlendWeight4[1] * readMatrixSampler(boneSampler, _glesBlendIndex4[1])\r\n\t\t\t+ _glesBlendWeight4[2] * readMatrixSampler(boneSampler, _glesBlendIndex4[2])\r\n\t\t\t+ _glesBlendWeight4[3] * readMatrixSampler(boneSampler, _glesBlendIndex4[3]);\r\n\treturn mat * srcVertex;\r\n}\r\n#endif\r\n\r\nmat4 buildMat4(int index)\r\n{\r\n\tvec4 quat = glstate_vec4_bones[index * 2 + 0];\r\n\tvec4 translation = glstate_vec4_bones[index * 2 + 1];\r\n\tfloat xy = 2.0 * quat.x * quat.y;\r\n\tfloat xz = 2.0 * quat.x * quat.z;\r\n\tfloat xw = 2.0 * quat.x * quat.w;\r\n\tfloat yz = 2.0 * quat.y * quat.z;\r\n\tfloat yw = 2.0 * quat.y * quat.w;\r\n\tfloat zw = 2.0 * quat.z * quat.w;\r\n\tfloat xx = 2.0*quat.x * quat.x;\r\n\tfloat yy = 2.0*quat.y * quat.y;\r\n\tfloat zz = 2.0*quat.z * quat.z;\r\n\tfloat ww = 2.0*quat.w * quat.w;\r\n\tmat4 matrix = mat4(\r\n\t1.0-yy-zz, xy+zw, xz-yw, 0,\r\n\txy-zw, 1.0-xx-zz, yz + xw, 0,\r\n\txz + yw, yz - xw, 1.0-xx-yy, 0,\r\n\ttranslation.x, translation.y, translation.z, 1);\r\n\treturn matrix;\r\n}\r\n\r\nhighp vec4 calcVertex(highp vec4 srcVertex,lowp vec4 blendIndex,lowp vec4 blendWeight)\r\n{\r\n\tint i = int(blendIndex.x);\r\n    int i2 =int(blendIndex.y);\r\n\tint i3 =int(blendIndex.z);\r\n\tint i4 =int(blendIndex.w);\r\n\r\n\tlowp mat4 blendMat = buildMat4(i)*blendWeight.x\r\n\t\t\t + buildMat4(i2)*blendWeight.y\r\n\t\t\t + buildMat4(i3)*blendWeight.z\r\n\t\t\t + buildMat4(i4)*blendWeight.w;\r\n\treturn blendMat * srcVertex;\r\n}\r\n\r\n#endif\r\n\r\nvarying highp vec4 vcolor;\r\n\r\n\r\nvoid main()\r\n{\r\n    xlv_TEXCOORD0 = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\r\n\r\n\tmat4 mat = _glesBlendWeight4[0] * readMatrixSampler(boneSampler, _glesBlendIndex4[0])\r\n\t\t\t+ _glesBlendWeight4[1] * readMatrixSampler(boneSampler, _glesBlendIndex4[1])\r\n\t\t\t+ _glesBlendWeight4[2] * readMatrixSampler(boneSampler, _glesBlendIndex4[2])\r\n\t\t\t+ _glesBlendWeight4[3] * readMatrixSampler(boneSampler, _glesBlendIndex4[3]);\r\n\t// mat = mat4(\r\n\t// \tvec4(1, 0, 0, 0),\r\n\t// \tvec4(0, 1, 0, 0),\r\n\t// \tvec4(0, 0, 1, 0),\r\n\t// \tvec4(0, 0, 0, 1)\r\n\t// \t);\r\n\t// mat = _glesBlendWeight4.x * glstate_matrix_bones[int(_glesBlendIndex4.x)]\r\n\t// \t\t+ _glesBlendWeight4.y * glstate_matrix_bones[int(_glesBlendIndex4.y)]\r\n\t// \t\t+ _glesBlendWeight4.z * glstate_matrix_bones[int(_glesBlendIndex4.z)]\r\n\t// \t\t+ _glesBlendWeight4.w * glstate_matrix_bones[int(_glesBlendIndex4.w)];\r\n\tvcolor = vec4(texture2D(boneSampler, _glesVertex.xz / vec2(8., 0)/ 3.).rgb, 1);\r\n    // xlv_TEXCOORD0 = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\r\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n\r\n    // //----------------------------------------------------------\r\n    // #ifdef LIGHTMAP\r\n    // mediump vec2 beforelightUV = _glesMultiTexCoord1.xy;\r\n    // lowp float u = beforelightUV.x * glstate_lightmapOffset.x + glstate_lightmapOffset.z;\r\n    // lowp float v = beforelightUV.y * glstate_lightmapOffset.y + glstate_lightmapOffset.w;\r\n    // lightmap_TEXCOORD = vec2(u,v);\r\n    // #endif\r\n\r\n    #ifdef SKIN\r\n    // position =calcVertex(position,_glesBlendIndex4,_glesBlendWeight4);\r\n\tposition = mat * position;\r\n    #endif\r\n\r\n    position = (glstate_matrix_mvp * position);\r\n\r\n    #ifdef FOG\r\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\r\n    factor = clamp(factor, 0.0, 1.0);\r\n    #endif\r\n\r\n\r\n    gl_Position =position;\r\n}","flowwater_new.fs.glsl":"uniform lowp sampler2D _MainTex;  \r\nvarying mediump vec2 _base_uv;\r\nvarying lowp vec4 attcolor;\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color; \r\nvarying lowp float factor;\r\n#endif\r\n\r\n//texture2DEtC1Mark\r\n\r\n\r\nvoid main() \r\n{\r\n    lowp vec4 basecolor = texture2D(_MainTex, _base_uv);\r\n    lowp vec4 emission=basecolor*attcolor;\r\n\r\n    #ifdef FOG\r\n    //emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\r\n    emission= mix(vec4(0,0,0,0), emission, factor);\r\n    #endif\r\n\r\n    gl_FragData[0] =emission;\r\n}","flowwater_new.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n\t\t    \"_MainColor('MainColor',color)=(1,1,1,1)\"\r\n    ],\r\n  \"queue\": 0,\r\n  \"passes\": {\r\n    \"base\": [\r\n      {\r\n        \"blendmode\": \"blend\",\r\n        \"showface\": \"ccw\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"flowwater_new\",\r\n        \"fs\": \"flowwater_new\"\r\n      }\r\n    ],\r\n    \"base_fog\": [\r\n      {\r\n        \"blendmode\": \"blend\",\r\n        \"showface\": \"ccw\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"flowwater_new\",\r\n        \"fs\": \"flowwater_new\"\r\n      }\r\n    ],\r\n    \"shadowgen\": [],\r\n    \"bone\": [],\r\n    \"shadowuse\": []\r\n  }\r\n}","flowwater_new.vs.glsl":"attribute highp vec3 _glesVertex;\r\nattribute mediump vec2 _glesMultiTexCoord0;\r\nattribute lowp vec4 _glesColor;\r\n\r\nuniform lowp vec4 _MainColor;\r\nuniform lowp float _alphaRate;\r\nuniform lowp float _colorRate;\r\n\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform mediump vec4 _MainTex_ST;\r\nuniform lowp float _speedu;\r\nuniform lowp float _speedv;\r\nuniform lowp float glstate_timer;\r\n\r\nvarying mediump vec2 _base_uv;\r\nvarying lowp vec4 attcolor;\r\n\r\n\r\n#ifdef FOG\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nvarying lowp float factor;\r\n#endif\r\n\r\nvoid main()\r\n{\r\n\thighp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n\r\n    lowp vec2 _speed= vec2(_speedu,_speedv);\r\n\t_base_uv = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw+ _speed * glstate_timer;\r\n\tattcolor= _MainColor;\r\n\tattcolor.rgb=attcolor.rgb*_colorRate;\r\n\tattcolor.a=attcolor.a*_alphaRate;\r\n\t\r\n    #ifdef FOG\r\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start); \r\n    factor = clamp(factor, 0.0, 1.0);  \r\n    #endif\r\n\r\n\tposition = (glstate_matrix_mvp * position);\r\n\tgl_Position = position;\r\n}\r\n\r\n","mask_add_tint.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n\t\"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_Mask('Mask',Texture)='white'{}\",\r\n        \"_MainTex_ST('MainTex_ST',Vector)=(1,1,0,0)\",\r\n        \"_Mask_ST('Mask_ST',Vector)=(1,1,0,0)\",\r\n        \"_Main_Color('Main_Color', Color) = (1,1,1,1)\",\r\n        \"_mixAlphaRate('mixAlphaRate',Float) = 1\",\r\n        \"_mixColorRate('mixColorRate',Float) = 1\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"add\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"add\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"add\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"add\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","mask_add_tint_uvroll.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n\t\"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_Mask('Mask',Texture)='white'{}\",\r\n        \"_MainTex_ST('MainTex_ST',Vector)=(1,1,0,0)\",\r\n        \"_Mask_ST('Mask_ST',Vector)=(1,1,0,0)\",\r\n        \"_Main_Color('Main_Color', Color) = (1,1,0,1)\",\r\n        \"_speedu('speedu',Float) = -1\",\r\n        \"_speedv('speedv',Float) = 0\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"add\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"add\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"add\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"add\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","mask_blend_tint.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n\t\"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_Mask('Mask',Texture)='white'{}\",\r\n        \"_MainTex_ST('MainTex_ST',Vector)=(1,1,0,0)\",\r\n        \"_Mask_ST('Mask_ST',Vector)=(1,1,0,0)\",\r\n        \"_Main_Color('Main_Color', Color) = (1,1,0,1)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"blend\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"blend\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"blend\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"blend\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","mask_blend_tint_uvroll.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n\t\"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_Mask('Mask',Texture)='white'{}\",\r\n        \"_MainTex_ST('MainTex_ST',Vector)=(1,1,0,0)\",\r\n        \"_Mask_ST('Mask_ST',Vector)=(1,1,0,0)\",\r\n        \"_Main_Color('Main_Color', Color) = (1,1,0,1)\",\r\n        \"_speedu('speedu',Float) = -1\",\r\n        \"_speedv('speedv',Float) = 0\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"blend\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"blend\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"blend\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"blend\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","mask_trans_tint.fs.glsl":"uniform sampler2D _MainTex; \r\nuniform sampler2D _Mask; \r\nuniform mediump vec4 _Main_Color;\r\n\r\nvarying mediump vec2 _maintex_uv;\r\nvarying mediump vec2 _mask_uv;\r\n\r\nuniform lowp float _mixColorRate;\r\nuniform lowp float _mixAlphaRate;\r\n\r\n//texture2DEtC1Mark\r\n\r\n#ifdef LIGHTMAP\r\nuniform lowp sampler2D _LightmapTex;\r\nvarying mediump vec2 lightmap_TEXCOORD;\r\nlowp vec3 decode_hdr(lowp vec4 data)\r\n{\r\n    lowp float power =pow( 2.0 ,data.a * 255.0 - 128.0);\r\n    return data.rgb * power * 2.0 ;\r\n}\r\n#endif\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color; \r\nvarying lowp float factor;\r\n#endif\r\nvoid main()    \r\n{\r\n    highp vec4 basecolor=texture2D(_MainTex,_maintex_uv);\r\n    highp vec4 maskcolor=texture2D(_Mask,_mask_uv);\r\n\r\n    lowp vec3 tempcolor=_Main_Color.rgb*basecolor.rgb*maskcolor.rgb*_mixColorRate;\r\n    lowp float tempAlpha=_Main_Color.a*basecolor.a*maskcolor.a*_mixAlphaRate;\r\n    lowp vec4 emission=vec4(tempcolor,tempAlpha);\r\n\r\n    //----------------------------------------------------------\r\n    #ifdef LIGHTMAP\r\n    lowp vec4 lightmap = texture2D(_LightmapTex, lightmap_TEXCOORD);\r\n    emission.xyz *= decode_hdr(lightmap);\r\n    #endif\r\n\r\n    #ifdef FOG\r\n    emission= mix(vec4(0,0,0,0), emission, factor);\r\n\r\n    //emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\r\n    #endif\r\n    gl_FragData[0] = emission;\r\n\r\n\r\n}\r\n","mask_trans_tint.vs.glsl":"attribute highp vec3 _glesVertex;\r\nattribute mediump vec2 _glesMultiTexCoord0;\r\nuniform highp mat4 glstate_matrix_mvp;\r\n\r\nuniform mediump vec4 _MainTex_ST;\r\nuniform mediump vec4 _Mask_ST;\r\nvarying mediump vec2 _maintex_uv;\r\nvarying mediump vec2 _mask_uv;\r\n\r\n#ifdef LIGHTMAP\r\nattribute mediump vec4 _glesMultiTexCoord1;\r\nuniform mediump vec4 glstate_lightmapOffset;\r\n// uniform mediump float glstate_lightmapUV;\r\nvarying mediump vec2 lightmap_TEXCOORD;\r\n#endif\r\n\r\n#ifdef FOG\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nvarying lowp float factor;\r\n#endif\r\n\r\n#ifdef SKIN\r\nattribute lowp vec4 _glesBlendIndex4;\r\nattribute lowp vec4 _glesBlendWeight4;\r\nuniform highp vec4 glstate_vec4_bones[110];\r\nmat4 buildMat4(int index)\r\n{\r\n\tvec4 quat = glstate_vec4_bones[index * 2 + 0];\r\n\tvec4 translation = glstate_vec4_bones[index * 2 + 1];\r\n\tfloat xy = 2.0 * quat.x * quat.y;\r\n\tfloat xz = 2.0 * quat.x * quat.z;\r\n\tfloat xw = 2.0 * quat.x * quat.w;\r\n\tfloat yz = 2.0 * quat.y * quat.z;\r\n\tfloat yw = 2.0 * quat.y * quat.w;\r\n\tfloat zw = 2.0 * quat.z * quat.w;\r\n\tfloat xx = 2.0*quat.x * quat.x;\r\n\tfloat yy = 2.0*quat.y * quat.y;\r\n\tfloat zz = 2.0*quat.z * quat.z;\r\n\tfloat ww = 2.0*quat.w * quat.w;\r\n\tfloat s = translation.w;\r\n\tmat4 matrix = mat4(\r\n\t(1.0-yy-zz)*s, (xy+zw)*s, (xz-yw)*s, 0,\r\n\t(xy-zw)*s, (1.0-xx-zz)*s, (yz + xw)*s, 0,\r\n\t(xz + yw)*s, (yz - xw)*s, (1.0-xx-yy)*s, 0,\r\n\ttranslation.x, translation.y, translation.z, 1);\r\n\treturn matrix;\r\n}\r\n\r\nhighp vec4 calcVertex(highp vec4 srcVertex,lowp vec4 blendIndex,lowp vec4 blendWeight)\r\n{\r\n\tint i = int(blendIndex.x);\r\n    int i2 =int(blendIndex.y);\r\n\tint i3 =int(blendIndex.z);\r\n\tint i4 =int(blendIndex.w);\r\n\r\n    mat4 mat = buildMat4(i)*blendWeight.x\r\n\t\t\t + buildMat4(i2)*blendWeight.y\r\n\t\t\t + buildMat4(i3)*blendWeight.z\r\n\t\t\t + buildMat4(i4)*blendWeight.w;\r\n\treturn mat* srcVertex;\r\n}\r\n#endif\r\n\r\nvoid main()\r\n{\r\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n\r\n    _maintex_uv = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\r\n    _mask_uv = _glesMultiTexCoord0.xy * _Mask_ST.xy + _Mask_ST.zw;\r\n    //----------------------------------------------------------\r\n    #ifdef LIGHTMAP\r\n    mediump vec2 beforelightUV = _glesMultiTexCoord1.xy;\r\n    lowp float u = beforelightUV.x * glstate_lightmapOffset.x + glstate_lightmapOffset.z;\r\n    lowp float v = beforelightUV.y * glstate_lightmapOffset.y + glstate_lightmapOffset.w;\r\n    lightmap_TEXCOORD = vec2(u,v);\r\n    #endif\r\n\r\n    #ifdef SKIN\r\n    position=calcVertex(position,_glesBlendIndex4,_glesBlendWeight4);\r\n    #endif\r\n    position =glstate_matrix_mvp * position;\r\n\r\n    #ifdef FOG\r\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\r\n    factor = clamp(factor, 0.0, 1.0);\r\n    #endif\r\n\r\n\tgl_Position = position;\r\n}","particlesystem.fs.glsl":"\r\nprecision mediump float;\r\n\r\nvarying vec2 v_uv;\r\n\r\nuniform vec4 _TintColor;\r\nuniform sampler2D _MainTex;\r\n\r\nvarying vec4 v_color;\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color; \r\nvarying lowp float factor;\r\n#endif\r\n\r\nvoid main()\r\n{\r\n    vec4 color = 2.0 * v_color * _TintColor * texture2D(_MainTex, v_uv);\r\n\r\n    #ifdef FOG\r\n        color.xyz = mix(glstate_fog_color.rgb, color.rgb, factor);\r\n    #endif\r\n    \r\n    gl_FragColor = color;\r\n}","particlesystem.vs.glsl":"\r\nprecision mediump float;  \r\n\r\n//坐标属性\r\nattribute vec3 _glesVertex;\r\nattribute vec2 _glesMultiTexCoord0;\r\n\r\nuniform mat4 glstate_matrix_mvp;\r\n\r\nuniform vec4 _MainTex_ST;\r\n\r\nuniform float _UVSpeedX;\r\nuniform float _UVSpeedY;\r\nuniform float glstate_timer;\r\n\r\nvarying vec4 v_color;\r\nvarying vec2 v_uv;\r\n\r\n#ifdef INSTANCE\r\n    attribute vec4 a_particle_position;\r\n    attribute vec4 a_particle_scale;\r\n    attribute vec4 a_particle_rotation;\r\n    attribute vec4 a_particle_color;\r\n    attribute vec4 a_particle_tilingOffset;\r\n    attribute vec4 a_particle_flipUV;\r\n#else\r\n    uniform vec4 a_particle_position;\r\n    uniform vec4 a_particle_scale;\r\n    uniform vec4 a_particle_rotation;\r\n    uniform vec4 a_particle_color;\r\n    uniform vec4 a_particle_tilingOffset;\r\n    uniform vec4 a_particle_flipUV;\r\n#endif\r\n\r\nuniform mat4 u_particle_billboardMatrix;\r\nuniform vec4 u_particle_pivotOffset;\r\n\r\n#ifdef FOG\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nvarying lowp float factor;\r\n#endif\r\n\r\nmat3 makeParticleRotationMatrix(vec3 rotation)\r\n{\r\n    float DEG2RAD = 3.1415926 / 180.0;\r\n    \r\n    float rx = rotation.x * DEG2RAD;\r\n    float ry = rotation.y * DEG2RAD;\r\n    float rz = rotation.z * DEG2RAD;\r\n\r\n    float sinX = sin(rx);\r\n    float cosX = cos(rx);\r\n    float sinY = sin(ry);\r\n    float cosY = cos(ry);\r\n    float sinZ = sin(rz);\r\n    float cosZ = cos(rz);\r\n\r\n    mat3 tmp;\r\n    float ce = cosY * cosZ;\r\n    float cf = cosY * sinZ;\r\n    float de = sinY * cosZ;\r\n    float df = sinY * sinZ;\r\n\r\n    float te0 = ce + df * sinX;\r\n    float te4 = de * sinX - cf;\r\n    float te8 = cosX * sinY;\r\n\r\n    float te1 = cosX * sinZ;\r\n    float te5 = cosX * cosZ;\r\n    float te9 = - sinX;\r\n\r\n    float te2 = cf * sinX - de;\r\n    float te6 = df + ce * sinX;\r\n    float te10 = cosX * cosY;\r\n\r\n    tmp[0] = vec3(te0, te1, te2);\r\n    tmp[1] = vec3(te4, te5, te6);\r\n    tmp[2] = vec3(te8, te9, te10);\r\n            \r\n    return tmp;\r\n}\r\n\r\nvec4 particleAnimation(vec4 position) \r\n{\r\n    mat3 billboardMatrix = mat3(u_particle_billboardMatrix[0].xyz,u_particle_billboardMatrix[1].xyz,u_particle_billboardMatrix[2].xyz);\r\n    \r\n    position.xyz = position.xyz + u_particle_pivotOffset.xyz;\r\n    \r\n    // 计算缩放\r\n    position.xyz = position.xyz * a_particle_scale.xyz;\r\n\r\n    // 计算旋转\r\n    mat3 rMat = makeParticleRotationMatrix(a_particle_rotation.xyz);\r\n    position.xyz = rMat * position.xyz;\r\n    position.xyz = billboardMatrix * position.xyz;\r\n\r\n    // 位移\r\n    position.xyz = position.xyz + a_particle_position.xyz;\r\n\r\n    // 颜色\r\n    v_color = a_particle_color;\r\n\r\n    if(a_particle_flipUV.x > 0.5) v_uv.x = 1.0 - v_uv.x;\r\n    if(a_particle_flipUV.y > 0.5) v_uv.y = 1.0 - v_uv.y;\r\n    v_uv = v_uv * a_particle_tilingOffset.xy + a_particle_tilingOffset.zw;\r\n    \r\n    return position;\r\n}\r\n\r\nvoid main() \r\n{\r\n    vec4 position = vec4(_glesVertex.xyz, 1.0);\r\n    //输出uv\r\n    v_uv = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\r\n\r\n    position = particleAnimation(position);\r\n\r\n    v_uv = v_uv + vec2(_UVSpeedX,_UVSpeedY) * glstate_timer;\r\n\r\n    //计算投影坐标\r\n    position = glstate_matrix_mvp * position;\r\n\r\n    #ifdef FOG\r\n        factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\r\n        factor = clamp(factor, 0.0, 1.0);\r\n    #endif\r\n\r\n    gl_Position = position;\r\n}","particlesystem_additive.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\": 0,\r\n  \"properties\": [\r\n    \"_MainTex('MainTex',Texture)='white'{}\",\r\n    \"_TintColor ('Tint Color', Color) = (0.5,0.5,0.5,0.5)\",\r\n    \"_UVSpeedX('UV SpeedX',float) = 0.0\",\r\n    \"_UVSpeedY('UV SpeedY',float) = 0.0\"\r\n  ],\r\n  \"passes\": {\r\n    \"base\": [\r\n      {\r\n        \"blendmode\": \"add\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"particlesystem\",\r\n        \"fs\": \"particlesystem\"\r\n      }\r\n    ],\r\n    \"base_fog\": [\r\n      {\r\n        \"blendmode\": \"add\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"particlesystem\",\r\n        \"fs\": \"particlesystem\"\r\n      }\r\n    ],\r\n    \"instance\": [\r\n      {\r\n        \"blendmode\": \"add\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"particlesystem\",\r\n        \"fs\": \"particlesystem\"\r\n      }\r\n    ],\r\n    \"instance_fog\": [\r\n      {\r\n        \"blendmode\": \"add\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"particlesystem\",\r\n        \"fs\": \"particlesystem\"\r\n      }\r\n    ]\r\n  }\r\n}","particlesystem_alphablended.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\": 0,\r\n  \"properties\": [\r\n    \"_MainTex('MainTex',Texture)='white'{}\",\r\n    \"_TintColor ('Tint Color', Color) = (0.5,0.5,0.5,0.5)\",\r\n    \"_UVSpeedX('UV SpeedX',float) = 0.0\",\r\n    \"_UVSpeedY('UV SpeedY',float) = 0.0\"\r\n  ],\r\n  \"passes\": {\r\n    \"base\": [\r\n      {\r\n        \"blendmode\": \"blend\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"particlesystem\",\r\n        \"fs\": \"particlesystem\"\r\n      }\r\n    ],\r\n    \"base_fog\": [\r\n      {\r\n        \"blendmode\": \"blend\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"particlesystem\",\r\n        \"fs\": \"particlesystem\"\r\n      }\r\n    ],\r\n    \"instance\": [\r\n      {\r\n        \"blendmode\": \"blend\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"particlesystem\",\r\n        \"fs\": \"particlesystem\"\r\n      }\r\n    ],\r\n    \"instance_fog\": [\r\n      {\r\n        \"blendmode\": \"blend\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"particlesystem\",\r\n        \"fs\": \"particlesystem\"\r\n      }\r\n    ]\r\n  }\r\n}","particles_add.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\":  0,\r\n  \"properties\": [\r\n\t\t\"_Main_Tex('MainTex',Texture)='white'{}\",\r\n        \"_Main_Color ('Tint Color', Color) = (1.0,1.0,1.0,1.0)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n          {\r\n            \"blendmode\": \"add\",\r\n            \"showface\": \"all\",\r\n            \"zwrite\": \"off\",\r\n            \"vs\": \"f14trans\",\r\n            \"fs\": \"f14trans\"\r\n          }\r\n        ],\r\n        \"shadowgen\": [],  \r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","particles_add_notest.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\":  0,\r\n  \"properties\": [\r\n\t\t\"_Main_Tex('MainTex',Texture)='white'{}\",\r\n        \"_Main_Color ('Tint Color', Color) = (1.0,1.0,1.0,1.0)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n          {\r\n            \"blendmode\": \"add\",\r\n            \"showface\": \"all\",\r\n            \"zwrite\": \"off\",\r\n            \"ztest\":\"off\",\r\n            \"vs\": \"f14trans\",\r\n            \"fs\": \"f14trans\"\r\n          }\r\n        ],\r\n        \"shadowgen\": [],  \r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","particles_blend.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\":  0,\r\n  \"properties\": [\r\n\t\t\"_Main_Tex('MainTex',Texture)='white'{}\",\r\n        \"_Main_Color ('Tint Color', Color) = (1.0,1.0,1.0,1.0)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n          {\r\n            \"blendmode\": \"blend\",\r\n            \"showface\": \"all\",\r\n            \"zwrite\": \"off\",\r\n            \"vs\": \"f14trans\",\r\n            \"fs\": \"f14trans\"\r\n          }\r\n        ],\r\n        \"shadowgen\": [],  \r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","particles_blend_notest.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\":  0,\r\n  \"properties\": [\r\n\t\t\"_Main_Tex('MainTex',Texture)='white'{}\",\r\n        \"_Main_Color ('Tint Color', Color) = (1.0,1.0,1.0,1.0)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n          {\r\n            \"blendmode\": \"blend\",\r\n            \"showface\": \"all\",\r\n            \"zwrite\": \"off\",\r\n            \"ztest\":\"off\",\r\n            \"vs\": \"f14trans\",\r\n            \"fs\": \"f14trans\"\r\n          }\r\n        ],\r\n        \"shadowgen\": [],  \r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","particles_diffuse.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\":  0,\r\n  \"properties\": [\r\n\t\t\"_Main_Tex('MainTex',Texture)='white'{}\",\r\n        \"_Main_Color ('Tint Color', Color) = (1.0,1.0,1.0,1.0)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n          {\r\n            \"showface\": \"ccw\",\r\n            \"vs\": \"f14trans\",\r\n            \"fs\": \"f14trans\"\r\n          }\r\n        ],\r\n        \"shadowgen\": [],  \r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","particle_mask_add_tint.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n\t\"properties\": [\r\n        \"_Main_Tex('MainTex',Texture)='white'{}\",\r\n        \"_Mask('Mask',Texture)='white'{}\",\r\n        \"_Main_Tex_ST('MainTex_ST',Vector)=(1,1,0,0)\",\r\n        \"_Mask_ST('Mask_ST',Vector)=(1,1,0,0)\",\r\n        \"_Main_Color('Main_Color', Color) = (1,1,1,1)\",\r\n        \"_mixAlphaRate('mixAlphaRate',Float) = 1\",\r\n        \"_mixColorRate('mixColorRate',Float) = 1\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"add\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"par_mask_tint\",\r\n                \"fs\": \"par_mask_tint\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","particle_mask_blend_tint.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n\t\"properties\": [\r\n        \"_Main_Tex('MainTex',Texture)='white'{}\",\r\n        \"_Mask('Mask',Texture)='white'{}\",\r\n        \"_Main_Tex_ST('MainTex_ST',Vector)=(1,1,0,0)\",\r\n        \"_Mask_ST('Mask_ST',Vector)=(1,1,0,0)\",\r\n        \"_Main_Color('Main_Color', Color) = (1,1,1,1)\",\r\n        \"_mixAlphaRate('mixAlphaRate',Float) = 1\",\r\n        \"_mixColorRate('mixColorRate',Float) = 1\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"blend\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"par_mask_tint\",\r\n                \"fs\": \"par_mask_tint\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","par_mask_tint.fs.glsl":"uniform sampler2D _Main_Tex; \r\nuniform sampler2D _Mask; \r\n\r\nvarying mediump vec2 _maintex_uv;\r\nvarying mediump vec2 _mask_uv;\r\n\r\nvarying mediump vec4 v_color;\r\n\r\n//texture2DEtC1Mark\r\n\r\nvoid main()    \r\n{\r\n    highp vec4 basecolor=texture2D(_Main_Tex,_maintex_uv);\r\n    highp vec4 maskcolor=texture2D(_Mask,_mask_uv);\r\n\r\n    mediump vec3 tempcolor=v_color.rgb*basecolor.rgb*maskcolor.rgb;\r\n    mediump float tempAlpha=v_color.a*basecolor.a*maskcolor.a;\r\n    mediump vec4 emission=vec4(tempcolor,tempAlpha);\r\n    \r\n    gl_FragData[0] = emission;\r\n}\r\n","par_mask_tint.vs.glsl":"attribute highp vec3 _glesVertex;\r\nattribute highp vec4 _glesColor;\r\nattribute mediump vec2 _glesMultiTexCoord0;\r\nuniform highp mat4 glstate_matrix_mvp;\r\n\r\nuniform mediump vec4 _Main_Tex_ST;\r\nuniform mediump vec4 _Mask_ST;\r\nvarying mediump vec2 _maintex_uv;\r\nvarying mediump vec2 _mask_uv;\r\n\r\nuniform mediump vec4 _Main_Color;\r\nuniform mediump float _mixColorRate;\r\nuniform mediump float _mixAlphaRate;\r\n\r\nvarying mediump vec4 v_color;\r\n\r\nvoid main()\r\n{\r\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n\tposition =glstate_matrix_mvp * position;\r\n\t \r\n    _maintex_uv = _glesMultiTexCoord0.xy * _Main_Tex_ST.xy + _Main_Tex_ST.zw;\r\n    _mask_uv = _glesMultiTexCoord0.xy * _Mask_ST.xy + _Mask_ST.zw;\r\n\tv_color=_glesColor*_Main_Color;\r\n\tv_color.rgb=v_color.rgb*_mixColorRate;\r\n\tv_color.a=v_color.a*_mixAlphaRate;\r\n\r\n\tgl_Position = position;\r\n}","post_depth.fs.glsl":"#ifdef GL_FRAGMENT_PRECISION_HIGH  \r\nprecision highp float;  \r\n#else  \r\nprecision mediump float;  \r\n#endif \r\n//varying highp vec3 xlv_Normal;   \r\n\r\nconst float PackUpscale = 256. / 255.; \r\n// fraction -> 0..1 (including 1)\r\nconst float UnpackDownscale = 255. / 256.; \r\n// 0..1 -> fraction (excluding 1)\r\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\r\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\r\nconst float ShiftRight8 = 1. / 256.;\r\nvec4 packDepthToRGBA( const in float v ) \r\n{\r\n    vec4 r = vec4( fract( v * PackFactors ), v );\r\n\tr.yzw -= r.xyz * ShiftRight8;\r\n // tidy overflow\r\n    return r * PackUpscale;\r\n}\r\nfloat unpackRGBAToDepth( const in vec4 v ) \r\n{\r\n    return dot( v, UnpackFactors );\r\n}\r\nvec2 packDepthToRG( const in float v ) \r\n{\r\n    vec2 r = vec2( fract( v * PackFactors.z ), v );\r\n\tr.y -= r.x * ShiftRight8;\r\n    return r * PackUpscale;\r\n}\r\nfloat unpackRGToDepth( const in vec2 v ) \r\n{\r\n    return dot( v.xy, UnpackFactors.zw );\r\n}\r\nvec3 packDepthToRGB( const in float v ) \r\n{\r\n    vec3 r = vec3( fract( v * PackFactors.yz ), v );\r\n\tr.yz -= r.xy * ShiftRight8;\r\n // tidy overflow\r\n    return r * PackUpscale;\r\n}\r\nfloat unpackRGBToDepth( const in vec3 v ) \r\n{\r\n    return dot( v.xyz, UnpackFactors.yzw );\r\n}\r\nvoid main() \r\n{\r\n    float z = gl_FragCoord.z;// fract(gl_FragCoord.z *256.*256.);\r\n    // highp vec2 normal =xlv_Normal.xy;\r\n    gl_FragColor=packDepthToRGBA(z);\r\n}","post_depth.vs.glsl":"#ifdef GL_FRAGMENT_PRECISION_HIGH  \r\nprecision highp float;  \r\n#else  \r\nprecision mediump float;  \r\n#endif \r\nattribute vec4 _glesVertex;    \r\n//attribute vec3 _glesNormal;\r\n//uniform highp mat4 glstate_matrix_modelview;\r\nuniform highp mat4 glstate_matrix_mvp;      \r\n// varying highp vec3 xlv_Normal;                \r\n       \r\nvoid main()                                     \r\n{        \r\n    // highp mat3 normalMat=mat3(\r\n    //     glstate_matrix_mvp[0],\r\n    //     glstate_matrix_mvp[1],\r\n    //     glstate_matrix_mvp[2]);\r\n\r\n    // xlv_Normal=normalMat * _glesNormal;\r\n    // xlv_Normal+=1.0;\r\n    // xlv_Normal*=0.5;\r\n\r\n    gl_Position = (glstate_matrix_mvp * _glesVertex);  \r\n}","quad.vs.glsl":"attribute vec4 _glesVertex;\r\nattribute vec4 _glesMultiTexCoord0;\r\nuniform highp mat4 glstate_matrix_mvp;\r\nvarying highp vec2 xlv_TEXCOORD0;\r\n\r\nvoid main()\r\n{\r\n    highp vec4 tmpvar_1;\r\n    tmpvar_1.w = 1.0;\r\n    tmpvar_1.xyz = _glesVertex.xyz;\r\n    xlv_TEXCOORD0 = _glesMultiTexCoord0.xy;\r\n    #ifdef QUAD\r\n    gl_Position = vec4(_glesVertex.xy*2.0,_glesVertex.z,1.0);\r\n    #else\r\n    gl_Position = (glstate_matrix_mvp * tmpvar_1);\r\n    #endif\r\n}","streamlight.fs.glsl":"uniform lowp sampler2D _MainTex;\r\nuniform lowp sampler2D _LightTex;\r\nuniform lowp vec4 _LightColor;\r\nuniform lowp float _LightRate;\r\nuniform lowp sampler2D _MaskTex;\r\nuniform lowp float _AlphaCut;\r\nvarying mediump vec2 xlv_TEXCOORD0;\r\nvarying mediump vec2 _StreamLightUV;\r\n\r\n#ifdef LIGHTMAP\r\nuniform lowp sampler2D _LightmapTex;\r\nvarying mediump vec2 lightmap_TEXCOORD;\r\nlowp vec3 decode_hdr(lowp vec4 data)\r\n{\r\n    lowp float power =pow( 2.0 ,data.a * 255.0 - 128.0);\r\n    return data.rgb * power * 2.0 ;\r\n}\r\n#endif\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color; \r\nvarying lowp float factor;\r\n#endif\r\n\r\n//texture2DEtC1Mark\r\n\r\nvoid main() \r\n{\r\n    lowp vec4 emission = texture2D(_MainTex, xlv_TEXCOORD0);\r\n    if(emission.a < _AlphaCut)\r\n        discard;\r\n\r\n    #ifdef LIGHTMAP\r\n    lowp vec4 lightmap = texture2D(_LightmapTex, lightmap_TEXCOORD);\r\n    emission.xyz *= decode_hdr(lightmap);\r\n    #endif\r\n\r\n    #ifdef FOG\r\n    emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\r\n    #endif\r\n\r\n    lowp vec4 light = texture2D(_LightTex, _StreamLightUV) * _LightColor * _LightRate;\r\n    lowp vec4 mask = texture2D(_MaskTex, xlv_TEXCOORD0);\r\n    light = min(light,mask);\r\n\r\n    emission.rgb += light.rgb;\r\n    gl_FragData[0] = emission;\r\n}","streamlight.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_MainColor ('MainColor', Color) = (1,1,1,1)\",\r\n        \"_AlphaCut('AlphaCut',Range(0.0,1.0)) = 0.5\",\r\n        \"_LightTex('Light',Texture) = 'black' {}\",\r\n        \"_LightColor('LightColor',Color) = (1,1,1,1)\",\r\n        \"_LightRate('LightRate',Range(0.0,1.0)) = 1.0\",\r\n\t\t\"_SpeedU('SpeedU',float) = 0.5\",\r\n\t\t\"_SpeedV('SpeedV',float) = 0.5\",\r\n\t\t\"_MaskTex('Mask',Texture) = 'white' {}\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"streamlight\",\r\n                \"fs\": \"streamlight\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"streamlight\",\r\n                \"fs\": \"streamlight\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"streamlight\",\r\n                \"fs\": \"streamlight\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"streamlight\",\r\n                \"fs\": \"streamlight\"\r\n            }\r\n        ]\r\n    }\r\n}","streamlight.vs.glsl":"attribute vec4 _glesVertex;\r\nattribute vec4 _glesMultiTexCoord0;\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform lowp float _SpeedU;\r\nuniform lowp float _SpeedV;\r\nuniform lowp float glstate_timer;\r\nuniform mediump vec4 _LightTex_ST;\r\nuniform mediump vec4 _MainTex_ST;\r\n\r\nvarying mediump vec2 xlv_TEXCOORD0;\r\nvarying mediump vec2 _StreamLightUV;\r\n\r\n#ifdef LIGHTMAP\r\nattribute mediump vec4 _glesMultiTexCoord1;\r\nuniform mediump vec4 glstate_lightmapOffset;\r\n// uniform mediump float glstate_lightmapUV;\r\nvarying mediump vec2 lightmap_TEXCOORD;\r\n#endif\r\n\r\n#ifdef FOG\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nvarying lowp float factor;\r\n#endif\r\n\r\n#ifdef SKIN\r\nattribute lowp vec4 _glesBlendIndex4;\r\nattribute lowp vec4 _glesBlendWeight4;\r\nuniform highp vec4 glstate_vec4_bones[110];\r\nmat4 buildMat4(int index)\r\n{\r\n\tvec4 quat = glstate_vec4_bones[index * 2 + 0];\r\n\tvec4 translation = glstate_vec4_bones[index * 2 + 1];\r\n\tfloat xy = 2.0 * quat.x * quat.y;\r\n\tfloat xz = 2.0 * quat.x * quat.z;\r\n\tfloat xw = 2.0 * quat.x * quat.w;\r\n\tfloat yz = 2.0 * quat.y * quat.z;\r\n\tfloat yw = 2.0 * quat.y * quat.w;\r\n\tfloat zw = 2.0 * quat.z * quat.w;\r\n\tfloat xx = 2.0*quat.x * quat.x;\r\n\tfloat yy = 2.0*quat.y * quat.y;\r\n\tfloat zz = 2.0*quat.z * quat.z;\r\n\tfloat ww = 2.0*quat.w * quat.w;\r\n\tfloat s = translation.w;\r\n\tmat4 matrix = mat4(\r\n\t(1.0-yy-zz)*s, (xy+zw)*s, (xz-yw)*s, 0,\r\n\t(xy-zw)*s, (1.0-xx-zz)*s, (yz + xw)*s, 0,\r\n\t(xz + yw)*s, (yz - xw)*s, (1.0-xx-yy)*s, 0,\r\n\ttranslation.x, translation.y, translation.z, 1);\r\n\treturn matrix;\r\n}\r\n\r\nhighp vec4 calcVertex(highp vec4 srcVertex,lowp vec4 blendIndex,lowp vec4 blendWeight)\r\n{\r\n\tint i = int(blendIndex.x);\r\n    int i2 =int(blendIndex.y);\r\n\tint i3 =int(blendIndex.z);\r\n\tint i4 =int(blendIndex.w);\r\n\r\n    mat4 mat = buildMat4(i)*blendWeight.x\r\n\t\t\t + buildMat4(i2)*blendWeight.y\r\n\t\t\t + buildMat4(i3)*blendWeight.z\r\n\t\t\t + buildMat4(i4)*blendWeight.w;\r\n\treturn mat* srcVertex;\r\n}\r\n#endif\r\n\r\nvoid main()\r\n{\r\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n    xlv_TEXCOORD0 = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\r\n\r\n    //----------------------------------------------------------\r\n    #ifdef LIGHTMAP\r\n    mediump vec2 beforelightUV = _glesMultiTexCoord1.xy;\r\n    lowp float u = beforelightUV.x * glstate_lightmapOffset.x + glstate_lightmapOffset.z;\r\n    lowp float v = beforelightUV.y * glstate_lightmapOffset.y + glstate_lightmapOffset.w;\r\n    lightmap_TEXCOORD = vec2(u,v);\r\n    #endif\r\n\r\n    #ifdef SKIN\r\n    position =calcVertex(position,_glesBlendIndex4,_glesBlendWeight4);\r\n    #endif\r\n    position = (glstate_matrix_mvp * position);\r\n\r\n    #ifdef FOG\r\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\r\n    factor = clamp(factor, 0.0, 1.0);\r\n    #endif\r\n\r\n    lowp vec2 _speed= vec2(_SpeedU,_SpeedV);\r\n    _StreamLightUV = (_glesMultiTexCoord0.xy * _LightTex_ST.xy + _LightTex_ST.zw)  + _speed * glstate_timer;\r\n\r\n    gl_Position =position;\r\n}","streamlight_bothside.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_MainColor ('MainColor', Color) = (1,1,1,1)\",\r\n        \"_AlphaCut('AlphaCut',Range(0.0,1.0)) = 0.5\",\r\n        \"_LightTex('Light',Texture) = 'black' {}\",\r\n        \"_LightColor('LightColor',Color) = (1,1,1,1)\",\r\n        \"_LightRate('LightRate',Range(0.0,1.0)) = 1.0\",\r\n\t\t\"_SpeedU('SpeedU',float) = 0.5\",\r\n\t\t\"_SpeedV('SpeedV',float) = 0.5\",\r\n\t\t\"_MaskTex('Mask',Texture) = 'white' {}\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"streamlight\",\r\n                \"fs\": \"streamlight\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"streamlight\",\r\n                \"fs\": \"streamlight\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"streamlight\",\r\n                \"fs\": \"streamlight\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"streamlight\",\r\n                \"fs\": \"streamlight\"\r\n            }   \r\n        ]\r\n    }\r\n}","terrain.fs.glsl":"uniform lowp sampler2D _Splat0;\r\nuniform lowp sampler2D _Splat1;\r\nuniform lowp sampler2D _Splat2;\r\nuniform lowp sampler2D _Splat3;\r\nuniform lowp sampler2D _Control;\r\n\r\nvarying lowp vec2 xlv_TEXCOORD0;\r\nvarying lowp vec2 uv_Splat0;\r\nvarying lowp vec2 uv_Splat1;\r\nvarying lowp vec2 uv_Splat2;\r\nvarying lowp vec2 uv_Splat3;\r\n\r\n#ifdef LIGHTMAP\r\nuniform lowp sampler2D _LightmapTex;\r\nvarying mediump vec2 lightmap_TEXCOORD;\r\nlowp vec3 decode_hdr(lowp vec4 data)\r\n{\r\n    lowp float power =pow( 2.0 ,data.a * 255.0 - 128.0);\r\n    return data.rgb * power * 2.0 ;\r\n}\r\n#endif\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color; \r\nvarying lowp float factor;\r\n#endif\r\n\r\n//texture2DEtC1Mark\r\n\r\nvoid main() \r\n{\r\n    lowp vec4 control = texture2D(_Control, xlv_TEXCOORD0);\r\n    lowp vec3 lay1 = texture2D(_Splat0,uv_Splat0).xyz;\r\n    lowp vec3 lay2 = texture2D(_Splat1,uv_Splat1).xyz;\r\n    lowp vec3 lay3 = texture2D(_Splat2,uv_Splat2).xyz;\r\n    lowp vec3 lay4 = texture2D(_Splat3,uv_Splat3).xyz;\r\n    lowp vec4 emission = vec4(lay1*control.r + lay2*control.g + lay3*control.b + lay4*(control.a),1.0);\r\n\r\n    #ifdef LIGHTMAP\r\n    lowp vec4 lightmap = texture2D(_LightmapTex, lightmap_TEXCOORD);\r\n    emission.xyz *= decode_hdr(lightmap);\r\n    #endif\r\n\r\n    #ifdef FOG\r\n    emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\r\n    #endif\r\n\r\n    gl_FragData[0] = emission;\r\n}","terrain.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_Splat0('Layer 1',Texture) = 'white'{}\",\r\n        \"_Splat1('layer 2',Texture) = 'white'{}\",\r\n        \"_Splat2('layer 3',Texture) = 'white'{}\",\r\n        \"_Splat3('layer 4',Texture) = 'white'{}\",\r\n        \"_Control('Control (RGBA)',Texture) = 'white'{}\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"terrain\",\r\n                \"fs\": \"terrain\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"terrain\",\r\n                \"fs\": \"terrain\"\r\n            }\r\n        ],\r\n\t\t\"lightmap\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"terrain\",\r\n                \"fs\": \"terrain\"\r\n            }\r\n        ],\r\n        \"lightmap_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"terrain\",\r\n                \"fs\": \"terrain\"\r\n            }\r\n        ]\r\n    }\r\n}","terrain.vs.glsl":"attribute vec4 _glesVertex;\r\nattribute lowp vec4 _glesMultiTexCoord0;\r\n\r\nuniform highp mat4 glstate_matrix_mvp;\r\n\r\nuniform lowp vec4 _Splat0_ST;\r\nuniform lowp vec4 _Splat1_ST;\r\nuniform lowp vec4 _Splat2_ST;\r\nuniform lowp vec4 _Splat3_ST;\r\n\r\nvarying lowp vec2 xlv_TEXCOORD0;\r\nvarying lowp vec2 uv_Splat0;\r\nvarying lowp vec2 uv_Splat1;\r\nvarying lowp vec2 uv_Splat2;\r\nvarying lowp vec2 uv_Splat3;\r\n\r\n#ifdef LIGHTMAP\r\nattribute mediump vec4 _glesMultiTexCoord1;\r\nuniform mediump vec4 glstate_lightmapOffset;\r\nvarying mediump vec2 lightmap_TEXCOORD;\r\n#endif\r\n\r\n#ifdef FOG\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nvarying lowp float factor;\r\n#endif\r\n\r\nvoid main()\r\n{\r\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n\r\n\txlv_TEXCOORD0 = _glesMultiTexCoord0.xy;\r\n    uv_Splat0 = _glesMultiTexCoord0.xy * _Splat0_ST.xy + _Splat0_ST.zw;\r\n    uv_Splat1 = _glesMultiTexCoord0.xy * _Splat1_ST.xy + _Splat1_ST.zw;\r\n    uv_Splat2 = _glesMultiTexCoord0.xy * _Splat2_ST.xy + _Splat2_ST.zw;\r\n    uv_Splat3 = _glesMultiTexCoord0.xy * _Splat3_ST.xy + _Splat3_ST.zw;\r\n    \r\n\r\n    //----------------------------------------------------------\r\n    #ifdef LIGHTMAP\r\n    mediump vec2 beforelightUV = _glesMultiTexCoord1.xy;\r\n    lowp float u = beforelightUV.x * glstate_lightmapOffset.x + glstate_lightmapOffset.z;\r\n    lowp float v = beforelightUV.y * glstate_lightmapOffset.y + glstate_lightmapOffset.w;\r\n    lightmap_TEXCOORD = vec2(u,v);\r\n    #endif\r\n\r\n    position = (glstate_matrix_mvp * position);\r\n\r\n    #ifdef FOG\r\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start); \r\n    factor = clamp(factor, 0.0, 1.0);  \r\n    #endif\r\n\r\n    gl_Position = position;\r\n}","transparent.fs.glsl":"uniform lowp sampler2D _MainTex;                                                                                                \r\nvarying highp vec2 xlv_TEXCOORD0;\r\nuniform lowp float _Alpha;\r\nuniform lowp float _Superimposition;\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color; \r\nvarying lowp float factor;\r\n#endif\r\n\r\n//texture2DEtC1Mark\r\n\r\nvoid main() \r\n{\r\n    lowp vec4 emission = texture2D(_MainTex, xlv_TEXCOORD0);\r\n    emission.a=emission.a*_Alpha;\r\n    emission.xyz *= _Superimposition;\r\n    //----------------------------------------------------------\r\n    #ifdef FOG\r\n    emission.xyz= mix(glstate_fog_color.xyz, emission.xyz, factor);\r\n    #endif\r\n    gl_FragData[0] = emission;\r\n\r\n}","transparent.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n\t\"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_Alpha('Alpha', Range(0.0, 1.0)) = 1.0\",\r\n        \"_Superimposition('Superimposition', Range(0.0, 7.0)) = 1.0\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"transparent\",\r\n                \"fs\": \"transparent\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"transparent\",\r\n                \"fs\": \"transparent\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"transparent\",\r\n                \"fs\": \"transparent\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"transparent\",\r\n                \"fs\": \"transparent\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","transparent.vs.glsl":"attribute highp vec4 _glesVertex;\r\nattribute mediump vec4 _glesMultiTexCoord0;\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform mediump vec4 _MainTex_ST;\r\n\r\nvarying mediump vec2 xlv_TEXCOORD0;\r\n\r\n#ifdef FOG\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nvarying lowp float factor;\r\n#endif\r\n\r\n#ifdef SKIN\r\nattribute lowp vec4 _glesBlendIndex4;\r\nattribute lowp vec4 _glesBlendWeight4;\r\nuniform highp vec4 glstate_vec4_bones[110];\r\nmat4 buildMat4(int index)\r\n{\r\n\tvec4 quat = glstate_vec4_bones[index * 2 + 0];\r\n\tvec4 translation = glstate_vec4_bones[index * 2 + 1];\r\n\tfloat xy = 2.0 * quat.x * quat.y;\r\n\tfloat xz = 2.0 * quat.x * quat.z;\r\n\tfloat xw = 2.0 * quat.x * quat.w;\r\n\tfloat yz = 2.0 * quat.y * quat.z;\r\n\tfloat yw = 2.0 * quat.y * quat.w;\r\n\tfloat zw = 2.0 * quat.z * quat.w;\r\n\tfloat xx = 2.0*quat.x * quat.x;\r\n\tfloat yy = 2.0*quat.y * quat.y;\r\n\tfloat zz = 2.0*quat.z * quat.z;\r\n\tfloat ww = 2.0*quat.w * quat.w;\r\n\tfloat s = translation.w;\r\n\tmat4 matrix = mat4(\r\n\t(1.0-yy-zz)*s, (xy+zw)*s, (xz-yw)*s, 0,\r\n\t(xy-zw)*s, (1.0-xx-zz)*s, (yz + xw)*s, 0,\r\n\t(xz + yw)*s, (yz - xw)*s, (1.0-xx-yy)*s, 0,\r\n\ttranslation.x, translation.y, translation.z, 1);\r\n\treturn matrix;\r\n}\r\n\r\nhighp vec4 calcVertex(highp vec4 srcVertex,lowp vec4 blendIndex,lowp vec4 blendWeight)\r\n{\r\n\tint i = int(blendIndex.x);\r\n    int i2 =int(blendIndex.y);\r\n\tint i3 =int(blendIndex.z);\r\n\tint i4 =int(blendIndex.w);\r\n\r\n    mat4 mat = buildMat4(i)*blendWeight.x\r\n\t\t\t + buildMat4(i2)*blendWeight.y\r\n\t\t\t + buildMat4(i3)*blendWeight.z\r\n\t\t\t + buildMat4(i4)*blendWeight.w;\r\n\treturn mat* srcVertex;\r\n}\r\n#endif\r\nvoid main()\r\n{\r\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n    xlv_TEXCOORD0 = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\r\n\r\n    //----------------------------------------------------------\r\n    #ifdef SKIN\r\n    position =calcVertex(position,_glesBlendIndex4,_glesBlendWeight4);\r\n    #endif\r\n    position = (glstate_matrix_mvp * position);\r\n\r\n    #ifdef FOG\r\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\r\n    factor = clamp(factor, 0.0, 1.0);\r\n    #endif\r\n\r\n    gl_Position = position;\r\n}"}